
STM32L432_checkTimer2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000190  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002668  08000190  08000190  00010190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080027f8  080027f8  000127f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002840  08002840  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08002840  08002840  00012840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002848  08002848  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08002848  08002848  00012848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08002850  08002850  00012850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002858  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000010  08002868  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08002868  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb1a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b52  00000000  00000000  0002fb5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d60  00000000  00000000  000316b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d18  00000000  00000000  00032410  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001febf  00000000  00000000  00033128  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a7a3  00000000  00000000  00052fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c6b14  00000000  00000000  0005d78a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012429e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023b4  00000000  00000000  0012431c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000b26d  00000000  00000000  001266d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080027e0 	.word	0x080027e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080027e0 	.word	0x080027e0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d0:	b084      	sub	sp, #16

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d2:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <MX_GPIO_Init+0x40>)
 80004d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004d6:	f042 0204 	orr.w	r2, r2, #4
 80004da:	64da      	str	r2, [r3, #76]	; 0x4c
 80004dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004de:	f002 0204 	and.w	r2, r2, #4
 80004e2:	9201      	str	r2, [sp, #4]
 80004e4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004e8:	f042 0201 	orr.w	r2, r2, #1
 80004ec:	64da      	str	r2, [r3, #76]	; 0x4c
 80004ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004f0:	f002 0201 	and.w	r2, r2, #1
 80004f4:	9202      	str	r2, [sp, #8]
 80004f6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004fa:	f042 0202 	orr.w	r2, r2, #2
 80004fe:	64da      	str	r2, [r3, #76]	; 0x4c
 8000500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000502:	f003 0302 	and.w	r3, r3, #2
 8000506:	9303      	str	r3, [sp, #12]
 8000508:	9b03      	ldr	r3, [sp, #12]

}
 800050a:	b004      	add	sp, #16
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	40021000 	.word	0x40021000

08000514 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000514:	b672      	cpsid	i
 8000516:	e7fe      	b.n	8000516 <Error_Handler+0x2>

08000518 <MX_TIM2_Init>:
{
 8000518:	b500      	push	{lr}
 800051a:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800051c:	2300      	movs	r3, #0
 800051e:	930a      	str	r3, [sp, #40]	; 0x28
 8000520:	930b      	str	r3, [sp, #44]	; 0x2c
 8000522:	930c      	str	r3, [sp, #48]	; 0x30
 8000524:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000526:	9307      	str	r3, [sp, #28]
 8000528:	9308      	str	r3, [sp, #32]
 800052a:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800052c:	9300      	str	r3, [sp, #0]
 800052e:	9301      	str	r3, [sp, #4]
 8000530:	9302      	str	r3, [sp, #8]
 8000532:	9303      	str	r3, [sp, #12]
 8000534:	9304      	str	r3, [sp, #16]
 8000536:	9305      	str	r3, [sp, #20]
 8000538:	9306      	str	r3, [sp, #24]
  htim2.Instance = TIM2;
 800053a:	4821      	ldr	r0, [pc, #132]	; (80005c0 <MX_TIM2_Init+0xa8>)
 800053c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000540:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 10000;
 8000542:	f242 7210 	movw	r2, #10000	; 0x2710
 8000546:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000548:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 1000;
 800054a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800054e:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000550:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000552:	2380      	movs	r3, #128	; 0x80
 8000554:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000556:	f001 fc6b 	bl	8001e30 <HAL_TIM_Base_Init>
 800055a:	bb38      	cbnz	r0, 80005ac <MX_TIM2_Init+0x94>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800055c:	a90e      	add	r1, sp, #56	; 0x38
 800055e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000562:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000566:	4816      	ldr	r0, [pc, #88]	; (80005c0 <MX_TIM2_Init+0xa8>)
 8000568:	f001 fd3e 	bl	8001fe8 <HAL_TIM_ConfigClockSource>
 800056c:	bb00      	cbnz	r0, 80005b0 <MX_TIM2_Init+0x98>
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800056e:	4814      	ldr	r0, [pc, #80]	; (80005c0 <MX_TIM2_Init+0xa8>)
 8000570:	f001 fc8d 	bl	8001e8e <HAL_TIM_OC_Init>
 8000574:	b9f0      	cbnz	r0, 80005b4 <MX_TIM2_Init+0x9c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000576:	2300      	movs	r3, #0
 8000578:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800057a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800057c:	a907      	add	r1, sp, #28
 800057e:	4810      	ldr	r0, [pc, #64]	; (80005c0 <MX_TIM2_Init+0xa8>)
 8000580:	f001 fe50 	bl	8002224 <HAL_TIMEx_MasterConfigSynchronization>
 8000584:	b9c0      	cbnz	r0, 80005b8 <MX_TIM2_Init+0xa0>
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000586:	2330      	movs	r3, #48	; 0x30
 8000588:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 250;
 800058a:	23fa      	movs	r3, #250	; 0xfa
 800058c:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800058e:	2300      	movs	r3, #0
 8000590:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000592:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000594:	2204      	movs	r2, #4
 8000596:	4669      	mov	r1, sp
 8000598:	4809      	ldr	r0, [pc, #36]	; (80005c0 <MX_TIM2_Init+0xa8>)
 800059a:	f001 fce3 	bl	8001f64 <HAL_TIM_OC_ConfigChannel>
 800059e:	b968      	cbnz	r0, 80005bc <MX_TIM2_Init+0xa4>
  HAL_TIM_MspPostInit(&htim2);
 80005a0:	4807      	ldr	r0, [pc, #28]	; (80005c0 <MX_TIM2_Init+0xa8>)
 80005a2:	f000 f8c1 	bl	8000728 <HAL_TIM_MspPostInit>
}
 80005a6:	b00f      	add	sp, #60	; 0x3c
 80005a8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80005ac:	f7ff ffb2 	bl	8000514 <Error_Handler>
    Error_Handler();
 80005b0:	f7ff ffb0 	bl	8000514 <Error_Handler>
    Error_Handler();
 80005b4:	f7ff ffae 	bl	8000514 <Error_Handler>
    Error_Handler();
 80005b8:	f7ff ffac 	bl	8000514 <Error_Handler>
    Error_Handler();
 80005bc:	f7ff ffaa 	bl	8000514 <Error_Handler>
 80005c0:	2000002c 	.word	0x2000002c

080005c4 <MX_USART2_UART_Init>:
{
 80005c4:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 80005c6:	480b      	ldr	r0, [pc, #44]	; (80005f4 <MX_USART2_UART_Init+0x30>)
 80005c8:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <MX_USART2_UART_Init+0x34>)
 80005ca:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80005cc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80005d0:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005d2:	2300      	movs	r3, #0
 80005d4:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005d6:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005d8:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005da:	220c      	movs	r2, #12
 80005dc:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005de:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e0:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005e2:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005e4:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005e6:	f002 f874 	bl	80026d2 <HAL_UART_Init>
 80005ea:	b900      	cbnz	r0, 80005ee <MX_USART2_UART_Init+0x2a>
}
 80005ec:	bd08      	pop	{r3, pc}
    Error_Handler();
 80005ee:	f7ff ff91 	bl	8000514 <Error_Handler>
 80005f2:	bf00      	nop
 80005f4:	20000078 	.word	0x20000078
 80005f8:	40004400 	.word	0x40004400

080005fc <SystemClock_Config>:
{
 80005fc:	b500      	push	{lr}
 80005fe:	b0ad      	sub	sp, #180	; 0xb4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000600:	2224      	movs	r2, #36	; 0x24
 8000602:	2100      	movs	r1, #0
 8000604:	a81c      	add	r0, sp, #112	; 0x70
 8000606:	f002 f8e3 	bl	80027d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060a:	2100      	movs	r1, #0
 800060c:	9116      	str	r1, [sp, #88]	; 0x58
 800060e:	9117      	str	r1, [sp, #92]	; 0x5c
 8000610:	9118      	str	r1, [sp, #96]	; 0x60
 8000612:	9119      	str	r1, [sp, #100]	; 0x64
 8000614:	911a      	str	r1, [sp, #104]	; 0x68
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000616:	2254      	movs	r2, #84	; 0x54
 8000618:	a801      	add	r0, sp, #4
 800061a:	f002 f8d9 	bl	80027d0 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800061e:	2302      	movs	r3, #2
 8000620:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000622:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000626:	921e      	str	r2, [sp, #120]	; 0x78
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000628:	2240      	movs	r2, #64	; 0x40
 800062a:	921f      	str	r2, [sp, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062c:	9325      	str	r3, [sp, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800062e:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000630:	2201      	movs	r2, #1
 8000632:	9227      	str	r2, [sp, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000634:	220a      	movs	r2, #10
 8000636:	9228      	str	r2, [sp, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000638:	2207      	movs	r2, #7
 800063a:	9229      	str	r2, [sp, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800063c:	932a      	str	r3, [sp, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800063e:	932b      	str	r3, [sp, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	a81b      	add	r0, sp, #108	; 0x6c
 8000642:	f000 fb75 	bl	8000d30 <HAL_RCC_OscConfig>
 8000646:	b9f0      	cbnz	r0, 8000686 <SystemClock_Config+0x8a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000648:	230f      	movs	r3, #15
 800064a:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064c:	2303      	movs	r3, #3
 800064e:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000654:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000658:	9219      	str	r2, [sp, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065a:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800065c:	2104      	movs	r1, #4
 800065e:	a816      	add	r0, sp, #88	; 0x58
 8000660:	f000 feac 	bl	80013bc <HAL_RCC_ClockConfig>
 8000664:	b988      	cbnz	r0, 800068a <SystemClock_Config+0x8e>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000666:	2302      	movs	r3, #2
 8000668:	9301      	str	r3, [sp, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800066a:	2300      	movs	r3, #0
 800066c:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800066e:	a801      	add	r0, sp, #4
 8000670:	f001 f830 	bl	80016d4 <HAL_RCCEx_PeriphCLKConfig>
 8000674:	b958      	cbnz	r0, 800068e <SystemClock_Config+0x92>
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000676:	f44f 7000 	mov.w	r0, #512	; 0x200
 800067a:	f000 fa6f 	bl	8000b5c <HAL_PWREx_ControlVoltageScaling>
 800067e:	b940      	cbnz	r0, 8000692 <SystemClock_Config+0x96>
}
 8000680:	b02d      	add	sp, #180	; 0xb4
 8000682:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000686:	f7ff ff45 	bl	8000514 <Error_Handler>
    Error_Handler();
 800068a:	f7ff ff43 	bl	8000514 <Error_Handler>
    Error_Handler();
 800068e:	f7ff ff41 	bl	8000514 <Error_Handler>
    Error_Handler();
 8000692:	f7ff ff3f 	bl	8000514 <Error_Handler>
	...

08000698 <main>:
{
 8000698:	b508      	push	{r3, lr}
  HAL_Init();
 800069a:	f000 f90b 	bl	80008b4 <HAL_Init>
  SystemClock_Config();
 800069e:	f7ff ffad 	bl	80005fc <SystemClock_Config>
  MX_GPIO_Init();
 80006a2:	f7ff ff15 	bl	80004d0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80006a6:	f7ff ff37 	bl	8000518 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80006aa:	f7ff ff8b 	bl	80005c4 <MX_USART2_UART_Init>
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_2);
 80006ae:	2104      	movs	r1, #4
 80006b0:	4801      	ldr	r0, [pc, #4]	; (80006b8 <main+0x20>)
 80006b2:	f001 fd19 	bl	80020e8 <HAL_TIM_OC_Start>
 80006b6:	e7fe      	b.n	80006b6 <main+0x1e>
 80006b8:	2000002c 	.word	0x2000002c

080006bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006bc:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006be:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <HAL_MspInit+0x2c>)
 80006c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80006c2:	f042 0201 	orr.w	r2, r2, #1
 80006c6:	661a      	str	r2, [r3, #96]	; 0x60
 80006c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80006ca:	f002 0201 	and.w	r2, r2, #1
 80006ce:	9200      	str	r2, [sp, #0]
 80006d0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80006d4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80006d8:	659a      	str	r2, [r3, #88]	; 0x58
 80006da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e0:	9301      	str	r3, [sp, #4]
 80006e2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e4:	b002      	add	sp, #8
 80006e6:	4770      	bx	lr
 80006e8:	40021000 	.word	0x40021000

080006ec <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80006ec:	6803      	ldr	r3, [r0, #0]
 80006ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006f2:	d000      	beq.n	80006f6 <HAL_TIM_Base_MspInit+0xa>
 80006f4:	4770      	bx	lr
{
 80006f6:	b500      	push	{lr}
 80006f8:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006fa:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80006fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000700:	f042 0201 	orr.w	r2, r2, #1
 8000704:	659a      	str	r2, [r3, #88]	; 0x58
 8000706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000708:	f003 0301 	and.w	r3, r3, #1
 800070c:	9301      	str	r3, [sp, #4]
 800070e:	9b01      	ldr	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	4611      	mov	r1, r2
 8000714:	201c      	movs	r0, #28
 8000716:	f000 f901 	bl	800091c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800071a:	201c      	movs	r0, #28
 800071c:	f000 f932 	bl	8000984 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000720:	b003      	add	sp, #12
 8000722:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000728 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000728:	b500      	push	{lr}
 800072a:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	2300      	movs	r3, #0
 800072e:	9301      	str	r3, [sp, #4]
 8000730:	9302      	str	r3, [sp, #8]
 8000732:	9303      	str	r3, [sp, #12]
 8000734:	9304      	str	r3, [sp, #16]
 8000736:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM2)
 8000738:	6803      	ldr	r3, [r0, #0]
 800073a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800073e:	d002      	beq.n	8000746 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000740:	b007      	add	sp, #28
 8000742:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800074a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800074c:	f042 0202 	orr.w	r2, r2, #2
 8000750:	64da      	str	r2, [r3, #76]	; 0x4c
 8000752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000754:	f003 0302 	and.w	r3, r3, #2
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800075c:	2308      	movs	r3, #8
 800075e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000760:	2302      	movs	r3, #2
 8000762:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000764:	2301      	movs	r3, #1
 8000766:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000768:	a901      	add	r1, sp, #4
 800076a:	4802      	ldr	r0, [pc, #8]	; (8000774 <HAL_TIM_MspPostInit+0x4c>)
 800076c:	f000 f92e 	bl	80009cc <HAL_GPIO_Init>
}
 8000770:	e7e6      	b.n	8000740 <HAL_TIM_MspPostInit+0x18>
 8000772:	bf00      	nop
 8000774:	48000400 	.word	0x48000400

08000778 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000778:	b530      	push	{r4, r5, lr}
 800077a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	2300      	movs	r3, #0
 800077e:	9303      	str	r3, [sp, #12]
 8000780:	9304      	str	r3, [sp, #16]
 8000782:	9305      	str	r3, [sp, #20]
 8000784:	9306      	str	r3, [sp, #24]
 8000786:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 8000788:	6802      	ldr	r2, [r0, #0]
 800078a:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <HAL_UART_MspInit+0x7c>)
 800078c:	429a      	cmp	r2, r3
 800078e:	d001      	beq.n	8000794 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000790:	b009      	add	sp, #36	; 0x24
 8000792:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8000794:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8000798:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800079a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800079e:	659a      	str	r2, [r3, #88]	; 0x58
 80007a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80007a2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80007a6:	9201      	str	r2, [sp, #4]
 80007a8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007ac:	f042 0201 	orr.w	r2, r2, #1
 80007b0:	64da      	str	r2, [r3, #76]	; 0x4c
 80007b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b4:	f003 0301 	and.w	r3, r3, #1
 80007b8:	9302      	str	r3, [sp, #8]
 80007ba:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007bc:	2304      	movs	r3, #4
 80007be:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	2502      	movs	r5, #2
 80007c2:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c4:	2403      	movs	r4, #3
 80007c6:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007c8:	2307      	movs	r3, #7
 80007ca:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007cc:	a903      	add	r1, sp, #12
 80007ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d2:	f000 f8fb 	bl	80009cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80007d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007da:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007dc:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e2:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80007e4:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80007e6:	a903      	add	r1, sp, #12
 80007e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ec:	f000 f8ee 	bl	80009cc <HAL_GPIO_Init>
}
 80007f0:	e7ce      	b.n	8000790 <HAL_UART_MspInit+0x18>
 80007f2:	bf00      	nop
 80007f4:	40004400 	.word	0x40004400

080007f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f8:	e7fe      	b.n	80007f8 <NMI_Handler>

080007fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007fa:	e7fe      	b.n	80007fa <HardFault_Handler>

080007fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007fc:	e7fe      	b.n	80007fc <MemManage_Handler>

080007fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fe:	e7fe      	b.n	80007fe <BusFault_Handler>

08000800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000800:	e7fe      	b.n	8000800 <UsageFault_Handler>

08000802 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000802:	4770      	bx	lr

08000804 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000804:	4770      	bx	lr

08000806 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000806:	4770      	bx	lr

08000808 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000808:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800080a:	f000 f863 	bl	80008d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800080e:	bd08      	pop	{r3, pc}

08000810 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000810:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000812:	4802      	ldr	r0, [pc, #8]	; (800081c <TIM2_IRQHandler+0xc>)
 8000814:	f001 fa07 	bl	8001c26 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000818:	bd08      	pop	{r3, pc}
 800081a:	bf00      	nop
 800081c:	2000002c 	.word	0x2000002c

08000820 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000820:	490f      	ldr	r1, [pc, #60]	; (8000860 <SystemInit+0x40>)
 8000822:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000826:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800082a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800082e:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <SystemInit+0x44>)
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	f042 0201 	orr.w	r2, r2, #1
 8000836:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000838:	2000      	movs	r0, #0
 800083a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8000842:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8000846:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000848:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800084c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000854:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000856:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000858:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800085c:	608b      	str	r3, [r1, #8]
#endif
}
 800085e:	4770      	bx	lr
 8000860:	e000ed00 	.word	0xe000ed00
 8000864:	40021000 	.word	0x40021000

08000868 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000868:	4b10      	ldr	r3, [pc, #64]	; (80008ac <HAL_InitTick+0x44>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	b90b      	cbnz	r3, 8000872 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800086e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000870:	4770      	bx	lr
{
 8000872:	b510      	push	{r4, lr}
 8000874:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000876:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800087a:	fbb0 f3f3 	udiv	r3, r0, r3
 800087e:	4a0c      	ldr	r2, [pc, #48]	; (80008b0 <HAL_InitTick+0x48>)
 8000880:	6810      	ldr	r0, [r2, #0]
 8000882:	fbb0 f0f3 	udiv	r0, r0, r3
 8000886:	f000 f88b 	bl	80009a0 <HAL_SYSTICK_Config>
 800088a:	b968      	cbnz	r0, 80008a8 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800088c:	2c0f      	cmp	r4, #15
 800088e:	d901      	bls.n	8000894 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8000890:	2001      	movs	r0, #1
 8000892:	e00a      	b.n	80008aa <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000894:	2200      	movs	r2, #0
 8000896:	4621      	mov	r1, r4
 8000898:	f04f 30ff 	mov.w	r0, #4294967295
 800089c:	f000 f83e 	bl	800091c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008a0:	4b02      	ldr	r3, [pc, #8]	; (80008ac <HAL_InitTick+0x44>)
 80008a2:	605c      	str	r4, [r3, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008a4:	2000      	movs	r0, #0
 80008a6:	e000      	b.n	80008aa <HAL_InitTick+0x42>
      status = HAL_ERROR;
 80008a8:	2001      	movs	r0, #1
}
 80008aa:	bd10      	pop	{r4, pc}
 80008ac:	20000004 	.word	0x20000004
 80008b0:	20000000 	.word	0x20000000

080008b4 <HAL_Init>:
{
 80008b4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b6:	2003      	movs	r0, #3
 80008b8:	f000 f81e 	bl	80008f8 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008bc:	2000      	movs	r0, #0
 80008be:	f7ff ffd3 	bl	8000868 <HAL_InitTick>
 80008c2:	b110      	cbz	r0, 80008ca <HAL_Init+0x16>
    status = HAL_ERROR;
 80008c4:	2401      	movs	r4, #1
}
 80008c6:	4620      	mov	r0, r4
 80008c8:	bd10      	pop	{r4, pc}
 80008ca:	4604      	mov	r4, r0
    HAL_MspInit();
 80008cc:	f7ff fef6 	bl	80006bc <HAL_MspInit>
 80008d0:	e7f9      	b.n	80008c6 <HAL_Init+0x12>
	...

080008d4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80008d4:	4b03      	ldr	r3, [pc, #12]	; (80008e4 <HAL_IncTick+0x10>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	4a03      	ldr	r2, [pc, #12]	; (80008e8 <HAL_IncTick+0x14>)
 80008da:	6811      	ldr	r1, [r2, #0]
 80008dc:	440b      	add	r3, r1
 80008de:	6013      	str	r3, [r2, #0]
}
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	20000004 	.word	0x20000004
 80008e8:	200000f8 	.word	0x200000f8

080008ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80008ec:	4b01      	ldr	r3, [pc, #4]	; (80008f4 <HAL_GetTick+0x8>)
 80008ee:	6818      	ldr	r0, [r3, #0]
}
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	200000f8 	.word	0x200000f8

080008f8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008f8:	4a07      	ldr	r2, [pc, #28]	; (8000918 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80008fa:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000900:	041b      	lsls	r3, r3, #16
 8000902:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000904:	0200      	lsls	r0, r0, #8
 8000906:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800090a:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 800090c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000910:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000914:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000916:	4770      	bx	lr
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800091c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800091e:	4b17      	ldr	r3, [pc, #92]	; (800097c <HAL_NVIC_SetPriority+0x60>)
 8000920:	68db      	ldr	r3, [r3, #12]
 8000922:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000926:	f1c3 0407 	rsb	r4, r3, #7
 800092a:	2c04      	cmp	r4, #4
 800092c:	bf28      	it	cs
 800092e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000930:	1d1d      	adds	r5, r3, #4
 8000932:	2d06      	cmp	r5, #6
 8000934:	d918      	bls.n	8000968 <HAL_NVIC_SetPriority+0x4c>
 8000936:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000938:	f04f 35ff 	mov.w	r5, #4294967295
 800093c:	fa05 f404 	lsl.w	r4, r5, r4
 8000940:	ea21 0104 	bic.w	r1, r1, r4
 8000944:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000946:	fa05 f303 	lsl.w	r3, r5, r3
 800094a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800094e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000950:	2800      	cmp	r0, #0
 8000952:	db0b      	blt.n	800096c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000954:	0109      	lsls	r1, r1, #4
 8000956:	b2c9      	uxtb	r1, r1
 8000958:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800095c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000960:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000964:	bc30      	pop	{r4, r5}
 8000966:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000968:	2300      	movs	r3, #0
 800096a:	e7e5      	b.n	8000938 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096c:	f000 000f 	and.w	r0, r0, #15
 8000970:	0109      	lsls	r1, r1, #4
 8000972:	b2c9      	uxtb	r1, r1
 8000974:	4b02      	ldr	r3, [pc, #8]	; (8000980 <HAL_NVIC_SetPriority+0x64>)
 8000976:	5419      	strb	r1, [r3, r0]
 8000978:	e7f4      	b.n	8000964 <HAL_NVIC_SetPriority+0x48>
 800097a:	bf00      	nop
 800097c:	e000ed00 	.word	0xe000ed00
 8000980:	e000ed14 	.word	0xe000ed14

08000984 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000984:	2800      	cmp	r0, #0
 8000986:	db07      	blt.n	8000998 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000988:	f000 021f 	and.w	r2, r0, #31
 800098c:	0940      	lsrs	r0, r0, #5
 800098e:	2301      	movs	r3, #1
 8000990:	4093      	lsls	r3, r2
 8000992:	4a02      	ldr	r2, [pc, #8]	; (800099c <HAL_NVIC_EnableIRQ+0x18>)
 8000994:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000e100 	.word	0xe000e100

080009a0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009a0:	3801      	subs	r0, #1
 80009a2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009a6:	d20a      	bcs.n	80009be <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_SYSTICK_Config+0x24>)
 80009aa:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ac:	4a06      	ldr	r2, [pc, #24]	; (80009c8 <HAL_SYSTICK_Config+0x28>)
 80009ae:	21f0      	movs	r1, #240	; 0xf0
 80009b0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b4:	2000      	movs	r0, #0
 80009b6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009b8:	2207      	movs	r2, #7
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80009be:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	e000e010 	.word	0xe000e010
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ce:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 80009d0:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009d2:	e096      	b.n	8000b02 <HAL_GPIO_Init+0x136>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009d4:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009d6:	005f      	lsls	r7, r3, #1
 80009d8:	2503      	movs	r5, #3
 80009da:	40bd      	lsls	r5, r7
 80009dc:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009e0:	68cd      	ldr	r5, [r1, #12]
 80009e2:	40bd      	lsls	r5, r7
 80009e4:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80009e6:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009e8:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009ea:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80009ee:	684d      	ldr	r5, [r1, #4]
 80009f0:	f3c5 1400 	ubfx	r4, r5, #4, #1
 80009f4:	409c      	lsls	r4, r3
 80009f6:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 80009f8:	6044      	str	r4, [r0, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009fa:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009fc:	005f      	lsls	r7, r3, #1
 80009fe:	2403      	movs	r4, #3
 8000a00:	40bc      	lsls	r4, r7
 8000a02:	43e4      	mvns	r4, r4
 8000a04:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a06:	688e      	ldr	r6, [r1, #8]
 8000a08:	40be      	lsls	r6, r7
 8000a0a:	432e      	orrs	r6, r5
      GPIOx->PUPDR = temp;
 8000a0c:	60c6      	str	r6, [r0, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a0e:	684d      	ldr	r5, [r1, #4]
 8000a10:	2d02      	cmp	r5, #2
 8000a12:	d001      	beq.n	8000a18 <HAL_GPIO_Init+0x4c>
 8000a14:	2d12      	cmp	r5, #18
 8000a16:	d113      	bne.n	8000a40 <HAL_GPIO_Init+0x74>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a18:	08de      	lsrs	r6, r3, #3
 8000a1a:	3608      	adds	r6, #8
 8000a1c:	f850 e026 	ldr.w	lr, [r0, r6, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a20:	f003 0507 	and.w	r5, r3, #7
 8000a24:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 8000a28:	250f      	movs	r5, #15
 8000a2a:	fa05 f50c 	lsl.w	r5, r5, ip
 8000a2e:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a32:	690d      	ldr	r5, [r1, #16]
 8000a34:	fa05 f50c 	lsl.w	r5, r5, ip
 8000a38:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3u] = temp;
 8000a3c:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a40:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a42:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a44:	684d      	ldr	r5, [r1, #4]
 8000a46:	f005 0503 	and.w	r5, r5, #3
 8000a4a:	40bd      	lsls	r5, r7
 8000a4c:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8000a4e:	6004      	str	r4, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a50:	684c      	ldr	r4, [r1, #4]
 8000a52:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8000a56:	d053      	beq.n	8000b00 <HAL_GPIO_Init+0x134>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a58:	4c38      	ldr	r4, [pc, #224]	; (8000b3c <HAL_GPIO_Init+0x170>)
 8000a5a:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8000a5c:	f045 0501 	orr.w	r5, r5, #1
 8000a60:	6625      	str	r5, [r4, #96]	; 0x60
 8000a62:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8000a64:	f004 0401 	and.w	r4, r4, #1
 8000a68:	9401      	str	r4, [sp, #4]
 8000a6a:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a6c:	089d      	lsrs	r5, r3, #2
 8000a6e:	1cae      	adds	r6, r5, #2
 8000a70:	4c33      	ldr	r4, [pc, #204]	; (8000b40 <HAL_GPIO_Init+0x174>)
 8000a72:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a76:	f003 0403 	and.w	r4, r3, #3
 8000a7a:	00a6      	lsls	r6, r4, #2
 8000a7c:	240f      	movs	r4, #15
 8000a7e:	40b4      	lsls	r4, r6
 8000a80:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a84:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8000a88:	d051      	beq.n	8000b2e <HAL_GPIO_Init+0x162>
 8000a8a:	4c2e      	ldr	r4, [pc, #184]	; (8000b44 <HAL_GPIO_Init+0x178>)
 8000a8c:	42a0      	cmp	r0, r4
 8000a8e:	d050      	beq.n	8000b32 <HAL_GPIO_Init+0x166>
 8000a90:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000a94:	42a0      	cmp	r0, r4
 8000a96:	d048      	beq.n	8000b2a <HAL_GPIO_Init+0x15e>
 8000a98:	2407      	movs	r4, #7
 8000a9a:	40b4      	lsls	r4, r6
 8000a9c:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a9e:	3502      	adds	r5, #2
 8000aa0:	4e27      	ldr	r6, [pc, #156]	; (8000b40 <HAL_GPIO_Init+0x174>)
 8000aa2:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000aa6:	4c28      	ldr	r4, [pc, #160]	; (8000b48 <HAL_GPIO_Init+0x17c>)
 8000aa8:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8000aaa:	43d4      	mvns	r4, r2
 8000aac:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ab0:	684f      	ldr	r7, [r1, #4]
 8000ab2:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000ab6:	d001      	beq.n	8000abc <HAL_GPIO_Init+0xf0>
        {
          temp |= iocurrent;
 8000ab8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 8000abc:	4d22      	ldr	r5, [pc, #136]	; (8000b48 <HAL_GPIO_Init+0x17c>)
 8000abe:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 8000ac0:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8000ac2:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ac6:	684f      	ldr	r7, [r1, #4]
 8000ac8:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000acc:	d001      	beq.n	8000ad2 <HAL_GPIO_Init+0x106>
        {
          temp |= iocurrent;
 8000ace:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8000ad2:	4d1d      	ldr	r5, [pc, #116]	; (8000b48 <HAL_GPIO_Init+0x17c>)
 8000ad4:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ad6:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8000ad8:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000adc:	684f      	ldr	r7, [r1, #4]
 8000ade:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000ae2:	d001      	beq.n	8000ae8 <HAL_GPIO_Init+0x11c>
        {
          temp |= iocurrent;
 8000ae4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8000ae8:	4d17      	ldr	r5, [pc, #92]	; (8000b48 <HAL_GPIO_Init+0x17c>)
 8000aea:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8000aec:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8000aee:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000af0:	684e      	ldr	r6, [r1, #4]
 8000af2:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000af6:	d001      	beq.n	8000afc <HAL_GPIO_Init+0x130>
        {
          temp |= iocurrent;
 8000af8:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8000afc:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <HAL_GPIO_Init+0x17c>)
 8000afe:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 8000b00:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b02:	680a      	ldr	r2, [r1, #0]
 8000b04:	fa32 f403 	lsrs.w	r4, r2, r3
 8000b08:	d015      	beq.n	8000b36 <HAL_GPIO_Init+0x16a>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b0a:	2401      	movs	r4, #1
 8000b0c:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 8000b0e:	4022      	ands	r2, r4
 8000b10:	d0f6      	beq.n	8000b00 <HAL_GPIO_Init+0x134>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b12:	684d      	ldr	r5, [r1, #4]
 8000b14:	1e6e      	subs	r6, r5, #1
 8000b16:	2e01      	cmp	r6, #1
 8000b18:	f67f af5c 	bls.w	80009d4 <HAL_GPIO_Init+0x8>
 8000b1c:	2d11      	cmp	r5, #17
 8000b1e:	f43f af59 	beq.w	80009d4 <HAL_GPIO_Init+0x8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b22:	2d12      	cmp	r5, #18
 8000b24:	f47f af69 	bne.w	80009fa <HAL_GPIO_Init+0x2e>
 8000b28:	e754      	b.n	80009d4 <HAL_GPIO_Init+0x8>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b2a:	2402      	movs	r4, #2
 8000b2c:	e7b5      	b.n	8000a9a <HAL_GPIO_Init+0xce>
 8000b2e:	2400      	movs	r4, #0
 8000b30:	e7b3      	b.n	8000a9a <HAL_GPIO_Init+0xce>
 8000b32:	2401      	movs	r4, #1
 8000b34:	e7b1      	b.n	8000a9a <HAL_GPIO_Init+0xce>
  }
}
 8000b36:	b003      	add	sp, #12
 8000b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	40010000 	.word	0x40010000
 8000b44:	48000400 	.word	0x48000400
 8000b48:	40010400 	.word	0x40010400

08000b4c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000b4c:	4b02      	ldr	r3, [pc, #8]	; (8000b58 <HAL_PWREx_GetVoltageRange+0xc>)
 8000b4e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8000b50:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40007000 	.word	0x40007000

08000b5c <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b5c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000b60:	d00f      	beq.n	8000b82 <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000b62:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b6e:	d034      	beq.n	8000bda <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b70:	4a1b      	ldr	r2, [pc, #108]	; (8000be0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8000b72:	6813      	ldr	r3, [r2, #0]
 8000b74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b7c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000b7e:	2000      	movs	r0, #0
 8000b80:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b82:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b8e:	d022      	beq.n	8000bd6 <HAL_PWREx_ControlVoltageScaling+0x7a>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b90:	4a13      	ldr	r2, [pc, #76]	; (8000be0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8000b92:	6813      	ldr	r3, [r2, #0]
 8000b94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b9c:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	2332      	movs	r3, #50	; 0x32
 8000ba4:	fb03 f302 	mul.w	r3, r3, r2
 8000ba8:	4a0f      	ldr	r2, [pc, #60]	; (8000be8 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8000baa:	fba2 2303 	umull	r2, r3, r2, r3
 8000bae:	0c9b      	lsrs	r3, r3, #18
 8000bb0:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bb2:	e000      	b.n	8000bb6 <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 8000bb4:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8000bb8:	6952      	ldr	r2, [r2, #20]
 8000bba:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000bbe:	d001      	beq.n	8000bc4 <HAL_PWREx_ControlVoltageScaling+0x68>
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d1f7      	bne.n	8000bb4 <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8000bc6:	695b      	ldr	r3, [r3, #20]
 8000bc8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000bcc:	d101      	bne.n	8000bd2 <HAL_PWREx_ControlVoltageScaling+0x76>
  return HAL_OK;
 8000bce:	2000      	movs	r0, #0
 8000bd0:	4770      	bx	lr
        return HAL_TIMEOUT;
 8000bd2:	2003      	movs	r0, #3
 8000bd4:	4770      	bx	lr
  return HAL_OK;
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	2000      	movs	r0, #0
}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	40007000 	.word	0x40007000
 8000be4:	20000000 	.word	0x20000000
 8000be8:	431bde83 	.word	0x431bde83

08000bec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000bec:	b530      	push	{r4, r5, lr}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	4605      	mov	r5, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000bf2:	4b20      	ldr	r3, [pc, #128]	; (8000c74 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8000bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000bfa:	d00b      	beq.n	8000c14 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000bfc:	f7ff ffa6 	bl	8000b4c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c00:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000c04:	d017      	beq.n	8000c36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8000c06:	2d80      	cmp	r5, #128	; 0x80
 8000c08:	d81f      	bhi.n	8000c4a <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8000c0a:	d02d      	beq.n	8000c68 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8000c0c:	2d70      	cmp	r5, #112	; 0x70
 8000c0e:	d02d      	beq.n	8000c6c <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000c10:	2100      	movs	r1, #0
 8000c12:	e01b      	b.n	8000c4c <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 8000c14:	4c17      	ldr	r4, [pc, #92]	; (8000c74 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8000c16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	65a3      	str	r3, [r4, #88]	; 0x58
 8000c1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c24:	9301      	str	r3, [sp, #4]
 8000c26:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000c28:	f7ff ff90 	bl	8000b4c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000c2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c32:	65a3      	str	r3, [r4, #88]	; 0x58
 8000c34:	e7e4      	b.n	8000c00 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8000c36:	2d80      	cmp	r5, #128	; 0x80
 8000c38:	d903      	bls.n	8000c42 <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8000c3a:	2da0      	cmp	r5, #160	; 0xa0
 8000c3c:	d903      	bls.n	8000c46 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8000c3e:	2102      	movs	r1, #2
 8000c40:	e004      	b.n	8000c4c <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000c42:	2100      	movs	r1, #0
 8000c44:	e002      	b.n	8000c4c <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8000c46:	2101      	movs	r1, #1
 8000c48:	e000      	b.n	8000c4c <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8000c4a:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000c4c:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8000c4e:	6813      	ldr	r3, [r2, #0]
 8000c50:	f023 0307 	bic.w	r3, r3, #7
 8000c54:	430b      	orrs	r3, r1
 8000c56:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8000c58:	6813      	ldr	r3, [r2, #0]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	428b      	cmp	r3, r1
 8000c60:	d006      	beq.n	8000c70 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
 8000c62:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8000c64:	b003      	add	sp, #12
 8000c66:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8000c68:	2102      	movs	r1, #2
 8000c6a:	e7ef      	b.n	8000c4c <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	e7ed      	b.n	8000c4c <RCC_SetFlashLatencyFromMSIRange+0x60>
  return HAL_OK;
 8000c70:	2000      	movs	r0, #0
 8000c72:	e7f7      	b.n	8000c64 <RCC_SetFlashLatencyFromMSIRange+0x78>
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40022000 	.word	0x40022000

08000c7c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c7c:	4a28      	ldr	r2, [pc, #160]	; (8000d20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000c7e:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c80:	68d2      	ldr	r2, [r2, #12]
 8000c82:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000c86:	f013 030c 	ands.w	r3, r3, #12
 8000c8a:	d00a      	beq.n	8000ca2 <HAL_RCC_GetSysClockFreq+0x26>
 8000c8c:	2b0c      	cmp	r3, #12
 8000c8e:	d006      	beq.n	8000c9e <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000c90:	2b04      	cmp	r3, #4
 8000c92:	d01f      	beq.n	8000cd4 <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8000c94:	2b08      	cmp	r3, #8
 8000c96:	d020      	beq.n	8000cda <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000c98:	2000      	movs	r0, #0
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	e010      	b.n	8000cc0 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000c9e:	2a01      	cmp	r2, #1
 8000ca0:	d1f6      	bne.n	8000c90 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000ca2:	4a1f      	ldr	r2, [pc, #124]	; (8000d20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000ca4:	6812      	ldr	r2, [r2, #0]
 8000ca6:	f012 0f08 	tst.w	r2, #8
 8000caa:	d10c      	bne.n	8000cc6 <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000cac:	4a1c      	ldr	r2, [pc, #112]	; (8000d20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000cae:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8000cb2:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8000cb6:	491b      	ldr	r1, [pc, #108]	; (8000d24 <HAL_RCC_GetSysClockFreq+0xa8>)
 8000cb8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000cbc:	b143      	cbz	r3, 8000cd0 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000cbe:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8000cc0:	2b0c      	cmp	r3, #12
 8000cc2:	d00d      	beq.n	8000ce0 <HAL_RCC_GetSysClockFreq+0x64>
}
 8000cc4:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000cc6:	4a16      	ldr	r2, [pc, #88]	; (8000d20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000cc8:	6812      	ldr	r2, [r2, #0]
 8000cca:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8000cce:	e7f2      	b.n	8000cb6 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 8000cd0:	4610      	mov	r0, r2
 8000cd2:	e7f5      	b.n	8000cc0 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 8000cd4:	4814      	ldr	r0, [pc, #80]	; (8000d28 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	e7f2      	b.n	8000cc0 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8000cda:	4814      	ldr	r0, [pc, #80]	; (8000d2c <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000cdc:	2200      	movs	r2, #0
 8000cde:	e7ef      	b.n	8000cc0 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8000ce8:	2b02      	cmp	r3, #2
 8000cea:	d015      	beq.n	8000d18 <HAL_RCC_GetSysClockFreq+0x9c>
 8000cec:	2b03      	cmp	r3, #3
 8000cee:	d015      	beq.n	8000d1c <HAL_RCC_GetSysClockFreq+0xa0>
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000cf2:	68d8      	ldr	r0, [r3, #12]
 8000cf4:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8000cf8:	3001      	adds	r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000cfa:	68d9      	ldr	r1, [r3, #12]
 8000cfc:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8000d00:	fb02 f201 	mul.w	r2, r2, r1
 8000d04:	fbb2 f2f0 	udiv	r2, r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000d08:	68d8      	ldr	r0, [r3, #12]
 8000d0a:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8000d0e:	3001      	adds	r0, #1
 8000d10:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 8000d12:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 8000d16:	e7d5      	b.n	8000cc4 <HAL_RCC_GetSysClockFreq+0x48>
      pllvco = HSI_VALUE;
 8000d18:	4a03      	ldr	r2, [pc, #12]	; (8000d28 <HAL_RCC_GetSysClockFreq+0xac>)
 8000d1a:	e7e9      	b.n	8000cf0 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = HSE_VALUE;
 8000d1c:	4a03      	ldr	r2, [pc, #12]	; (8000d2c <HAL_RCC_GetSysClockFreq+0xb0>)
 8000d1e:	e7e7      	b.n	8000cf0 <HAL_RCC_GetSysClockFreq+0x74>
 8000d20:	40021000 	.word	0x40021000
 8000d24:	080027f8 	.word	0x080027f8
 8000d28:	00f42400 	.word	0x00f42400
 8000d2c:	007a1200 	.word	0x007a1200

08000d30 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8000d30:	2800      	cmp	r0, #0
 8000d32:	f000 8327 	beq.w	8001384 <HAL_RCC_OscConfig+0x654>
{
 8000d36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d3c:	4baf      	ldr	r3, [pc, #700]	; (8000ffc <HAL_RCC_OscConfig+0x2cc>)
 8000d3e:	689d      	ldr	r5, [r3, #8]
 8000d40:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d44:	68de      	ldr	r6, [r3, #12]
 8000d46:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d4a:	6803      	ldr	r3, [r0, #0]
 8000d4c:	f013 0f10 	tst.w	r3, #16
 8000d50:	d05b      	beq.n	8000e0a <HAL_RCC_OscConfig+0xda>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d52:	b1e5      	cbz	r5, 8000d8e <HAL_RCC_OscConfig+0x5e>
 8000d54:	2d0c      	cmp	r5, #12
 8000d56:	d018      	beq.n	8000d8a <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000d58:	69a3      	ldr	r3, [r4, #24]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	f000 80bc 	beq.w	8000ed8 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_MSI_ENABLE();
 8000d60:	4aa6      	ldr	r2, [pc, #664]	; (8000ffc <HAL_RCC_OscConfig+0x2cc>)
 8000d62:	6813      	ldr	r3, [r2, #0]
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000d6a:	f7ff fdbf 	bl	80008ec <HAL_GetTick>
 8000d6e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d70:	4ba2      	ldr	r3, [pc, #648]	; (8000ffc <HAL_RCC_OscConfig+0x2cc>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f013 0f02 	tst.w	r3, #2
 8000d78:	f040 809b 	bne.w	8000eb2 <HAL_RCC_OscConfig+0x182>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d7c:	f7ff fdb6 	bl	80008ec <HAL_GetTick>
 8000d80:	1bc0      	subs	r0, r0, r7
 8000d82:	2802      	cmp	r0, #2
 8000d84:	d9f4      	bls.n	8000d70 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 8000d86:	2303      	movs	r3, #3
 8000d88:	e308      	b.n	800139c <HAL_RCC_OscConfig+0x66c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d8a:	2e01      	cmp	r6, #1
 8000d8c:	d1e4      	bne.n	8000d58 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d8e:	4b9b      	ldr	r3, [pc, #620]	; (8000ffc <HAL_RCC_OscConfig+0x2cc>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f013 0f02 	tst.w	r3, #2
 8000d96:	d003      	beq.n	8000da0 <HAL_RCC_OscConfig+0x70>
 8000d98:	69a3      	ldr	r3, [r4, #24]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f000 82f5 	beq.w	800138a <HAL_RCC_OscConfig+0x65a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000da0:	6a20      	ldr	r0, [r4, #32]
 8000da2:	4b96      	ldr	r3, [pc, #600]	; (8000ffc <HAL_RCC_OscConfig+0x2cc>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f013 0f08 	tst.w	r3, #8
 8000daa:	d05c      	beq.n	8000e66 <HAL_RCC_OscConfig+0x136>
 8000dac:	4b93      	ldr	r3, [pc, #588]	; (8000ffc <HAL_RCC_OscConfig+0x2cc>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000db4:	4298      	cmp	r0, r3
 8000db6:	d85d      	bhi.n	8000e74 <HAL_RCC_OscConfig+0x144>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000db8:	4b90      	ldr	r3, [pc, #576]	; (8000ffc <HAL_RCC_OscConfig+0x2cc>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	f042 0208 	orr.w	r2, r2, #8
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000dc8:	6a21      	ldr	r1, [r4, #32]
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dce:	685a      	ldr	r2, [r3, #4]
 8000dd0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000dd4:	69e1      	ldr	r1, [r4, #28]
 8000dd6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000dda:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000ddc:	2d00      	cmp	r5, #0
 8000dde:	d061      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x174>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000de0:	f7ff ff4c 	bl	8000c7c <HAL_RCC_GetSysClockFreq>
 8000de4:	4b85      	ldr	r3, [pc, #532]	; (8000ffc <HAL_RCC_OscConfig+0x2cc>)
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000dec:	4a84      	ldr	r2, [pc, #528]	; (8001000 <HAL_RCC_OscConfig+0x2d0>)
 8000dee:	5cd3      	ldrb	r3, [r2, r3]
 8000df0:	f003 031f 	and.w	r3, r3, #31
 8000df4:	40d8      	lsrs	r0, r3
 8000df6:	4b83      	ldr	r3, [pc, #524]	; (8001004 <HAL_RCC_OscConfig+0x2d4>)
 8000df8:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8000dfa:	4b83      	ldr	r3, [pc, #524]	; (8001008 <HAL_RCC_OscConfig+0x2d8>)
 8000dfc:	6818      	ldr	r0, [r3, #0]
 8000dfe:	f7ff fd33 	bl	8000868 <HAL_InitTick>
        if(status != HAL_OK)
 8000e02:	4603      	mov	r3, r0
 8000e04:	2800      	cmp	r0, #0
 8000e06:	f040 82c9 	bne.w	800139c <HAL_RCC_OscConfig+0x66c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e0a:	6823      	ldr	r3, [r4, #0]
 8000e0c:	f013 0f01 	tst.w	r3, #1
 8000e10:	f000 8081 	beq.w	8000f16 <HAL_RCC_OscConfig+0x1e6>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e14:	2d08      	cmp	r5, #8
 8000e16:	d075      	beq.n	8000f04 <HAL_RCC_OscConfig+0x1d4>
 8000e18:	2d0c      	cmp	r5, #12
 8000e1a:	d071      	beq.n	8000f00 <HAL_RCC_OscConfig+0x1d0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e1c:	6863      	ldr	r3, [r4, #4]
 8000e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e22:	f000 8097 	beq.w	8000f54 <HAL_RCC_OscConfig+0x224>
 8000e26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e2a:	f000 8099 	beq.w	8000f60 <HAL_RCC_OscConfig+0x230>
 8000e2e:	4b73      	ldr	r3, [pc, #460]	; (8000ffc <HAL_RCC_OscConfig+0x2cc>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e3e:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e40:	6863      	ldr	r3, [r4, #4]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f000 8099 	beq.w	8000f7a <HAL_RCC_OscConfig+0x24a>
        tickstart = HAL_GetTick();
 8000e48:	f7ff fd50 	bl	80008ec <HAL_GetTick>
 8000e4c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e4e:	4b6b      	ldr	r3, [pc, #428]	; (8000ffc <HAL_RCC_OscConfig+0x2cc>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e56:	d15e      	bne.n	8000f16 <HAL_RCC_OscConfig+0x1e6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e58:	f7ff fd48 	bl	80008ec <HAL_GetTick>
 8000e5c:	1bc0      	subs	r0, r0, r7
 8000e5e:	2864      	cmp	r0, #100	; 0x64
 8000e60:	d9f5      	bls.n	8000e4e <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8000e62:	2303      	movs	r3, #3
 8000e64:	e29a      	b.n	800139c <HAL_RCC_OscConfig+0x66c>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e66:	4b65      	ldr	r3, [pc, #404]	; (8000ffc <HAL_RCC_OscConfig+0x2cc>)
 8000e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e6c:	091b      	lsrs	r3, r3, #4
 8000e6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e72:	e79f      	b.n	8000db4 <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e74:	f7ff feba 	bl	8000bec <RCC_SetFlashLatencyFromMSIRange>
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	f040 8288 	bne.w	800138e <HAL_RCC_OscConfig+0x65e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e7e:	4b5f      	ldr	r3, [pc, #380]	; (8000ffc <HAL_RCC_OscConfig+0x2cc>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	f042 0208 	orr.w	r2, r2, #8
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000e8e:	6a21      	ldr	r1, [r4, #32]
 8000e90:	430a      	orrs	r2, r1
 8000e92:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e94:	685a      	ldr	r2, [r3, #4]
 8000e96:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000e9a:	69e1      	ldr	r1, [r4, #28]
 8000e9c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	e79d      	b.n	8000de0 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ea4:	6a20      	ldr	r0, [r4, #32]
 8000ea6:	f7ff fea1 	bl	8000bec <RCC_SetFlashLatencyFromMSIRange>
 8000eaa:	2800      	cmp	r0, #0
 8000eac:	d098      	beq.n	8000de0 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e274      	b.n	800139c <HAL_RCC_OscConfig+0x66c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000eb2:	4b52      	ldr	r3, [pc, #328]	; (8000ffc <HAL_RCC_OscConfig+0x2cc>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	f042 0208 	orr.w	r2, r2, #8
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000ec2:	6a21      	ldr	r1, [r4, #32]
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ec8:	685a      	ldr	r2, [r3, #4]
 8000eca:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000ece:	69e1      	ldr	r1, [r4, #28]
 8000ed0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	e798      	b.n	8000e0a <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_MSI_DISABLE();
 8000ed8:	4a48      	ldr	r2, [pc, #288]	; (8000ffc <HAL_RCC_OscConfig+0x2cc>)
 8000eda:	6813      	ldr	r3, [r2, #0]
 8000edc:	f023 0301 	bic.w	r3, r3, #1
 8000ee0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000ee2:	f7ff fd03 	bl	80008ec <HAL_GetTick>
 8000ee6:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ee8:	4b44      	ldr	r3, [pc, #272]	; (8000ffc <HAL_RCC_OscConfig+0x2cc>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f013 0f02 	tst.w	r3, #2
 8000ef0:	d08b      	beq.n	8000e0a <HAL_RCC_OscConfig+0xda>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ef2:	f7ff fcfb 	bl	80008ec <HAL_GetTick>
 8000ef6:	1bc0      	subs	r0, r0, r7
 8000ef8:	2802      	cmp	r0, #2
 8000efa:	d9f5      	bls.n	8000ee8 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8000efc:	2303      	movs	r3, #3
 8000efe:	e24d      	b.n	800139c <HAL_RCC_OscConfig+0x66c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f00:	2e03      	cmp	r6, #3
 8000f02:	d18b      	bne.n	8000e1c <HAL_RCC_OscConfig+0xec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f04:	4b3d      	ldr	r3, [pc, #244]	; (8000ffc <HAL_RCC_OscConfig+0x2cc>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f0c:	d003      	beq.n	8000f16 <HAL_RCC_OscConfig+0x1e6>
 8000f0e:	6863      	ldr	r3, [r4, #4]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	f000 823e 	beq.w	8001392 <HAL_RCC_OscConfig+0x662>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f16:	6823      	ldr	r3, [r4, #0]
 8000f18:	f013 0f02 	tst.w	r3, #2
 8000f1c:	d04f      	beq.n	8000fbe <HAL_RCC_OscConfig+0x28e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f1e:	2d04      	cmp	r5, #4
 8000f20:	d03c      	beq.n	8000f9c <HAL_RCC_OscConfig+0x26c>
 8000f22:	2d0c      	cmp	r5, #12
 8000f24:	d038      	beq.n	8000f98 <HAL_RCC_OscConfig+0x268>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f26:	68e3      	ldr	r3, [r4, #12]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d078      	beq.n	800101e <HAL_RCC_OscConfig+0x2ee>
        __HAL_RCC_HSI_ENABLE();
 8000f2c:	4a33      	ldr	r2, [pc, #204]	; (8000ffc <HAL_RCC_OscConfig+0x2cc>)
 8000f2e:	6813      	ldr	r3, [r2, #0]
 8000f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f34:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000f36:	f7ff fcd9 	bl	80008ec <HAL_GetTick>
 8000f3a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f3c:	4b2f      	ldr	r3, [pc, #188]	; (8000ffc <HAL_RCC_OscConfig+0x2cc>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000f44:	d162      	bne.n	800100c <HAL_RCC_OscConfig+0x2dc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f46:	f7ff fcd1 	bl	80008ec <HAL_GetTick>
 8000f4a:	1b80      	subs	r0, r0, r6
 8000f4c:	2802      	cmp	r0, #2
 8000f4e:	d9f5      	bls.n	8000f3c <HAL_RCC_OscConfig+0x20c>
            return HAL_TIMEOUT;
 8000f50:	2303      	movs	r3, #3
 8000f52:	e223      	b.n	800139c <HAL_RCC_OscConfig+0x66c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f54:	4a29      	ldr	r2, [pc, #164]	; (8000ffc <HAL_RCC_OscConfig+0x2cc>)
 8000f56:	6813      	ldr	r3, [r2, #0]
 8000f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	e76f      	b.n	8000e40 <HAL_RCC_OscConfig+0x110>
 8000f60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f64:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	e762      	b.n	8000e40 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8000f7a:	f7ff fcb7 	bl	80008ec <HAL_GetTick>
 8000f7e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f80:	4b1e      	ldr	r3, [pc, #120]	; (8000ffc <HAL_RCC_OscConfig+0x2cc>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f88:	d0c5      	beq.n	8000f16 <HAL_RCC_OscConfig+0x1e6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f8a:	f7ff fcaf 	bl	80008ec <HAL_GetTick>
 8000f8e:	1bc0      	subs	r0, r0, r7
 8000f90:	2864      	cmp	r0, #100	; 0x64
 8000f92:	d9f5      	bls.n	8000f80 <HAL_RCC_OscConfig+0x250>
            return HAL_TIMEOUT;
 8000f94:	2303      	movs	r3, #3
 8000f96:	e201      	b.n	800139c <HAL_RCC_OscConfig+0x66c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f98:	2e02      	cmp	r6, #2
 8000f9a:	d1c4      	bne.n	8000f26 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f9c:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <HAL_RCC_OscConfig+0x2cc>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000fa4:	d003      	beq.n	8000fae <HAL_RCC_OscConfig+0x27e>
 8000fa6:	68e3      	ldr	r3, [r4, #12]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	f000 81f4 	beq.w	8001396 <HAL_RCC_OscConfig+0x666>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fae:	4a13      	ldr	r2, [pc, #76]	; (8000ffc <HAL_RCC_OscConfig+0x2cc>)
 8000fb0:	6853      	ldr	r3, [r2, #4]
 8000fb2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8000fb6:	6921      	ldr	r1, [r4, #16]
 8000fb8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000fbc:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fbe:	6823      	ldr	r3, [r4, #0]
 8000fc0:	f013 0f08 	tst.w	r3, #8
 8000fc4:	d056      	beq.n	8001074 <HAL_RCC_OscConfig+0x344>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fc6:	6963      	ldr	r3, [r4, #20]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d03c      	beq.n	8001046 <HAL_RCC_OscConfig+0x316>
      __HAL_RCC_LSI_ENABLE();
 8000fcc:	4a0b      	ldr	r2, [pc, #44]	; (8000ffc <HAL_RCC_OscConfig+0x2cc>)
 8000fce:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000fda:	f7ff fc87 	bl	80008ec <HAL_GetTick>
 8000fde:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_RCC_OscConfig+0x2cc>)
 8000fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fe6:	f013 0f02 	tst.w	r3, #2
 8000fea:	d143      	bne.n	8001074 <HAL_RCC_OscConfig+0x344>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fec:	f7ff fc7e 	bl	80008ec <HAL_GetTick>
 8000ff0:	1b80      	subs	r0, r0, r6
 8000ff2:	2802      	cmp	r0, #2
 8000ff4:	d9f4      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x2b0>
          return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e1d0      	b.n	800139c <HAL_RCC_OscConfig+0x66c>
 8000ffa:	bf00      	nop
 8000ffc:	40021000 	.word	0x40021000
 8001000:	08002828 	.word	0x08002828
 8001004:	20000000 	.word	0x20000000
 8001008:	20000008 	.word	0x20000008
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800100c:	4ab0      	ldr	r2, [pc, #704]	; (80012d0 <HAL_RCC_OscConfig+0x5a0>)
 800100e:	6853      	ldr	r3, [r2, #4]
 8001010:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001014:	6921      	ldr	r1, [r4, #16]
 8001016:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800101a:	6053      	str	r3, [r2, #4]
 800101c:	e7cf      	b.n	8000fbe <HAL_RCC_OscConfig+0x28e>
        __HAL_RCC_HSI_DISABLE();
 800101e:	4aac      	ldr	r2, [pc, #688]	; (80012d0 <HAL_RCC_OscConfig+0x5a0>)
 8001020:	6813      	ldr	r3, [r2, #0]
 8001022:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001026:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001028:	f7ff fc60 	bl	80008ec <HAL_GetTick>
 800102c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800102e:	4ba8      	ldr	r3, [pc, #672]	; (80012d0 <HAL_RCC_OscConfig+0x5a0>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001036:	d0c2      	beq.n	8000fbe <HAL_RCC_OscConfig+0x28e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001038:	f7ff fc58 	bl	80008ec <HAL_GetTick>
 800103c:	1b80      	subs	r0, r0, r6
 800103e:	2802      	cmp	r0, #2
 8001040:	d9f5      	bls.n	800102e <HAL_RCC_OscConfig+0x2fe>
            return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e1aa      	b.n	800139c <HAL_RCC_OscConfig+0x66c>
      __HAL_RCC_LSI_DISABLE();
 8001046:	4aa2      	ldr	r2, [pc, #648]	; (80012d0 <HAL_RCC_OscConfig+0x5a0>)
 8001048:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800104c:	f023 0301 	bic.w	r3, r3, #1
 8001050:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001054:	f7ff fc4a 	bl	80008ec <HAL_GetTick>
 8001058:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800105a:	4b9d      	ldr	r3, [pc, #628]	; (80012d0 <HAL_RCC_OscConfig+0x5a0>)
 800105c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001060:	f013 0f02 	tst.w	r3, #2
 8001064:	d006      	beq.n	8001074 <HAL_RCC_OscConfig+0x344>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001066:	f7ff fc41 	bl	80008ec <HAL_GetTick>
 800106a:	1b80      	subs	r0, r0, r6
 800106c:	2802      	cmp	r0, #2
 800106e:	d9f4      	bls.n	800105a <HAL_RCC_OscConfig+0x32a>
          return HAL_TIMEOUT;
 8001070:	2303      	movs	r3, #3
 8001072:	e193      	b.n	800139c <HAL_RCC_OscConfig+0x66c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001074:	6823      	ldr	r3, [r4, #0]
 8001076:	f013 0f04 	tst.w	r3, #4
 800107a:	d07a      	beq.n	8001172 <HAL_RCC_OscConfig+0x442>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800107c:	4b94      	ldr	r3, [pc, #592]	; (80012d0 <HAL_RCC_OscConfig+0x5a0>)
 800107e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001080:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001084:	d10b      	bne.n	800109e <HAL_RCC_OscConfig+0x36e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001086:	4b92      	ldr	r3, [pc, #584]	; (80012d0 <HAL_RCC_OscConfig+0x5a0>)
 8001088:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800108a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800108e:	659a      	str	r2, [r3, #88]	; 0x58
 8001090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001096:	9301      	str	r3, [sp, #4]
 8001098:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800109a:	2601      	movs	r6, #1
 800109c:	e000      	b.n	80010a0 <HAL_RCC_OscConfig+0x370>
    FlagStatus       pwrclkchanged = RESET;
 800109e:	2600      	movs	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010a0:	4b8c      	ldr	r3, [pc, #560]	; (80012d4 <HAL_RCC_OscConfig+0x5a4>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80010a8:	d026      	beq.n	80010f8 <HAL_RCC_OscConfig+0x3c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010aa:	68a3      	ldr	r3, [r4, #8]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d037      	beq.n	8001120 <HAL_RCC_OscConfig+0x3f0>
 80010b0:	2b05      	cmp	r3, #5
 80010b2:	d03d      	beq.n	8001130 <HAL_RCC_OscConfig+0x400>
 80010b4:	4b86      	ldr	r3, [pc, #536]	; (80012d0 <HAL_RCC_OscConfig+0x5a0>)
 80010b6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80010ba:	f022 0201 	bic.w	r2, r2, #1
 80010be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80010c2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80010c6:	f022 0204 	bic.w	r2, r2, #4
 80010ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010ce:	68a3      	ldr	r3, [r4, #8]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d03b      	beq.n	800114c <HAL_RCC_OscConfig+0x41c>
      tickstart = HAL_GetTick();
 80010d4:	f7ff fc0a 	bl	80008ec <HAL_GetTick>
 80010d8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010da:	4b7d      	ldr	r3, [pc, #500]	; (80012d0 <HAL_RCC_OscConfig+0x5a0>)
 80010dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010e0:	f013 0f02 	tst.w	r3, #2
 80010e4:	d144      	bne.n	8001170 <HAL_RCC_OscConfig+0x440>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010e6:	f7ff fc01 	bl	80008ec <HAL_GetTick>
 80010ea:	1bc0      	subs	r0, r0, r7
 80010ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80010f0:	4298      	cmp	r0, r3
 80010f2:	d9f2      	bls.n	80010da <HAL_RCC_OscConfig+0x3aa>
          return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e151      	b.n	800139c <HAL_RCC_OscConfig+0x66c>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010f8:	4a76      	ldr	r2, [pc, #472]	; (80012d4 <HAL_RCC_OscConfig+0x5a4>)
 80010fa:	6813      	ldr	r3, [r2, #0]
 80010fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001100:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001102:	f7ff fbf3 	bl	80008ec <HAL_GetTick>
 8001106:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001108:	4b72      	ldr	r3, [pc, #456]	; (80012d4 <HAL_RCC_OscConfig+0x5a4>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001110:	d1cb      	bne.n	80010aa <HAL_RCC_OscConfig+0x37a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001112:	f7ff fbeb 	bl	80008ec <HAL_GetTick>
 8001116:	1bc0      	subs	r0, r0, r7
 8001118:	2802      	cmp	r0, #2
 800111a:	d9f5      	bls.n	8001108 <HAL_RCC_OscConfig+0x3d8>
          return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e13d      	b.n	800139c <HAL_RCC_OscConfig+0x66c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001120:	4a6b      	ldr	r2, [pc, #428]	; (80012d0 <HAL_RCC_OscConfig+0x5a0>)
 8001122:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800112e:	e7ce      	b.n	80010ce <HAL_RCC_OscConfig+0x39e>
 8001130:	4b67      	ldr	r3, [pc, #412]	; (80012d0 <HAL_RCC_OscConfig+0x5a0>)
 8001132:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001136:	f042 0204 	orr.w	r2, r2, #4
 800113a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800113e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001142:	f042 0201 	orr.w	r2, r2, #1
 8001146:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800114a:	e7c0      	b.n	80010ce <HAL_RCC_OscConfig+0x39e>
      tickstart = HAL_GetTick();
 800114c:	f7ff fbce 	bl	80008ec <HAL_GetTick>
 8001150:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001152:	4b5f      	ldr	r3, [pc, #380]	; (80012d0 <HAL_RCC_OscConfig+0x5a0>)
 8001154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001158:	f013 0f02 	tst.w	r3, #2
 800115c:	d008      	beq.n	8001170 <HAL_RCC_OscConfig+0x440>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800115e:	f7ff fbc5 	bl	80008ec <HAL_GetTick>
 8001162:	1bc0      	subs	r0, r0, r7
 8001164:	f241 3388 	movw	r3, #5000	; 0x1388
 8001168:	4298      	cmp	r0, r3
 800116a:	d9f2      	bls.n	8001152 <HAL_RCC_OscConfig+0x422>
          return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e115      	b.n	800139c <HAL_RCC_OscConfig+0x66c>
    if(pwrclkchanged == SET)
 8001170:	b9e6      	cbnz	r6, 80011ac <HAL_RCC_OscConfig+0x47c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001172:	6823      	ldr	r3, [r4, #0]
 8001174:	f013 0f20 	tst.w	r3, #32
 8001178:	d035      	beq.n	80011e6 <HAL_RCC_OscConfig+0x4b6>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800117a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800117c:	b1e3      	cbz	r3, 80011b8 <HAL_RCC_OscConfig+0x488>
      __HAL_RCC_HSI48_ENABLE();
 800117e:	4a54      	ldr	r2, [pc, #336]	; (80012d0 <HAL_RCC_OscConfig+0x5a0>)
 8001180:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 800118c:	f7ff fbae 	bl	80008ec <HAL_GetTick>
 8001190:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001192:	4b4f      	ldr	r3, [pc, #316]	; (80012d0 <HAL_RCC_OscConfig+0x5a0>)
 8001194:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001198:	f013 0f02 	tst.w	r3, #2
 800119c:	d123      	bne.n	80011e6 <HAL_RCC_OscConfig+0x4b6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800119e:	f7ff fba5 	bl	80008ec <HAL_GetTick>
 80011a2:	1b80      	subs	r0, r0, r6
 80011a4:	2802      	cmp	r0, #2
 80011a6:	d9f4      	bls.n	8001192 <HAL_RCC_OscConfig+0x462>
          return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e0f7      	b.n	800139c <HAL_RCC_OscConfig+0x66c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011ac:	4a48      	ldr	r2, [pc, #288]	; (80012d0 <HAL_RCC_OscConfig+0x5a0>)
 80011ae:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80011b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011b4:	6593      	str	r3, [r2, #88]	; 0x58
 80011b6:	e7dc      	b.n	8001172 <HAL_RCC_OscConfig+0x442>
      __HAL_RCC_HSI48_DISABLE();
 80011b8:	4a45      	ldr	r2, [pc, #276]	; (80012d0 <HAL_RCC_OscConfig+0x5a0>)
 80011ba:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 80011be:	f023 0301 	bic.w	r3, r3, #1
 80011c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 80011c6:	f7ff fb91 	bl	80008ec <HAL_GetTick>
 80011ca:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80011cc:	4b40      	ldr	r3, [pc, #256]	; (80012d0 <HAL_RCC_OscConfig+0x5a0>)
 80011ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011d2:	f013 0f02 	tst.w	r3, #2
 80011d6:	d006      	beq.n	80011e6 <HAL_RCC_OscConfig+0x4b6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011d8:	f7ff fb88 	bl	80008ec <HAL_GetTick>
 80011dc:	1b80      	subs	r0, r0, r6
 80011de:	2802      	cmp	r0, #2
 80011e0:	d9f4      	bls.n	80011cc <HAL_RCC_OscConfig+0x49c>
          return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e0da      	b.n	800139c <HAL_RCC_OscConfig+0x66c>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80011e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	f000 80d6 	beq.w	800139a <HAL_RCC_OscConfig+0x66a>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d027      	beq.n	8001242 <HAL_RCC_OscConfig+0x512>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80011f2:	2d0c      	cmp	r5, #12
 80011f4:	f000 80db 	beq.w	80013ae <HAL_RCC_OscConfig+0x67e>
        __HAL_RCC_PLL_DISABLE();
 80011f8:	4b35      	ldr	r3, [pc, #212]	; (80012d0 <HAL_RCC_OscConfig+0x5a0>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001200:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001208:	d104      	bne.n	8001214 <HAL_RCC_OscConfig+0x4e4>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800120a:	4a31      	ldr	r2, [pc, #196]	; (80012d0 <HAL_RCC_OscConfig+0x5a0>)
 800120c:	68d3      	ldr	r3, [r2, #12]
 800120e:	f023 0303 	bic.w	r3, r3, #3
 8001212:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001214:	4a2e      	ldr	r2, [pc, #184]	; (80012d0 <HAL_RCC_OscConfig+0x5a0>)
 8001216:	68d3      	ldr	r3, [r2, #12]
 8001218:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800121c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001220:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8001222:	f7ff fb63 	bl	80008ec <HAL_GetTick>
 8001226:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001228:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <HAL_RCC_OscConfig+0x5a0>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001230:	f000 80a6 	beq.w	8001380 <HAL_RCC_OscConfig+0x650>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001234:	f7ff fb5a 	bl	80008ec <HAL_GetTick>
 8001238:	1b00      	subs	r0, r0, r4
 800123a:	2802      	cmp	r0, #2
 800123c:	d9f4      	bls.n	8001228 <HAL_RCC_OscConfig+0x4f8>
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e0ac      	b.n	800139c <HAL_RCC_OscConfig+0x66c>
      pll_config = RCC->PLLCFGR;
 8001242:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <HAL_RCC_OscConfig+0x5a0>)
 8001244:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001246:	f003 0103 	and.w	r1, r3, #3
 800124a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800124c:	4291      	cmp	r1, r2
 800124e:	d009      	beq.n	8001264 <HAL_RCC_OscConfig+0x534>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001250:	2d0c      	cmp	r5, #12
 8001252:	f000 80a6 	beq.w	80013a2 <HAL_RCC_OscConfig+0x672>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001256:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <HAL_RCC_OscConfig+0x5a0>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 800125e:	d03b      	beq.n	80012d8 <HAL_RCC_OscConfig+0x5a8>
            return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e09b      	b.n	800139c <HAL_RCC_OscConfig+0x66c>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001264:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001268:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800126a:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800126c:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8001270:	d1ee      	bne.n	8001250 <HAL_RCC_OscConfig+0x520>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001272:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001276:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001278:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800127c:	d1e8      	bne.n	8001250 <HAL_RCC_OscConfig+0x520>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800127e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001282:	6ba1      	ldr	r1, [r4, #56]	; 0x38
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001284:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8001288:	d1e2      	bne.n	8001250 <HAL_RCC_OscConfig+0x520>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800128a:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800128e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001290:	0852      	lsrs	r2, r2, #1
 8001292:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001294:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8001298:	d1da      	bne.n	8001250 <HAL_RCC_OscConfig+0x520>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800129a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800129e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80012a0:	0852      	lsrs	r2, r2, #1
 80012a2:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012a4:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80012a8:	d1d2      	bne.n	8001250 <HAL_RCC_OscConfig+0x520>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <HAL_RCC_OscConfig+0x5a0>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80012b2:	d178      	bne.n	80013a6 <HAL_RCC_OscConfig+0x676>
          __HAL_RCC_PLL_ENABLE();
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_RCC_OscConfig+0x5a0>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80012bc:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80012be:	68da      	ldr	r2, [r3, #12]
 80012c0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80012c4:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 80012c6:	f7ff fb11 	bl	80008ec <HAL_GetTick>
 80012ca:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012cc:	e051      	b.n	8001372 <HAL_RCC_OscConfig+0x642>
 80012ce:	bf00      	nop
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40007000 	.word	0x40007000
            __HAL_RCC_PLL_DISABLE();
 80012d8:	4a36      	ldr	r2, [pc, #216]	; (80013b4 <HAL_RCC_OscConfig+0x684>)
 80012da:	6813      	ldr	r3, [r2, #0]
 80012dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012e0:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 80012e2:	f7ff fb03 	bl	80008ec <HAL_GetTick>
 80012e6:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012e8:	4b32      	ldr	r3, [pc, #200]	; (80013b4 <HAL_RCC_OscConfig+0x684>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80012f0:	d006      	beq.n	8001300 <HAL_RCC_OscConfig+0x5d0>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012f2:	f7ff fafb 	bl	80008ec <HAL_GetTick>
 80012f6:	1b40      	subs	r0, r0, r5
 80012f8:	2802      	cmp	r0, #2
 80012fa:	d9f5      	bls.n	80012e8 <HAL_RCC_OscConfig+0x5b8>
                return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e04d      	b.n	800139c <HAL_RCC_OscConfig+0x66c>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001300:	4a2c      	ldr	r2, [pc, #176]	; (80013b4 <HAL_RCC_OscConfig+0x684>)
 8001302:	68d3      	ldr	r3, [r2, #12]
 8001304:	492c      	ldr	r1, [pc, #176]	; (80013b8 <HAL_RCC_OscConfig+0x688>)
 8001306:	4019      	ands	r1, r3
 8001308:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800130a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800130c:	3801      	subs	r0, #1
 800130e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8001312:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001314:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001318:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800131a:	0840      	lsrs	r0, r0, #1
 800131c:	3801      	subs	r0, #1
 800131e:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8001322:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001324:	0840      	lsrs	r0, r0, #1
 8001326:	3801      	subs	r0, #1
 8001328:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 800132c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800132e:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8001332:	430b      	orrs	r3, r1
 8001334:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 8001336:	6813      	ldr	r3, [r2, #0]
 8001338:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800133c:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800133e:	68d3      	ldr	r3, [r2, #12]
 8001340:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001344:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 8001346:	f7ff fad1 	bl	80008ec <HAL_GetTick>
 800134a:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800134c:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <HAL_RCC_OscConfig+0x684>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001354:	d106      	bne.n	8001364 <HAL_RCC_OscConfig+0x634>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001356:	f7ff fac9 	bl	80008ec <HAL_GetTick>
 800135a:	1b00      	subs	r0, r0, r4
 800135c:	2802      	cmp	r0, #2
 800135e:	d9f5      	bls.n	800134c <HAL_RCC_OscConfig+0x61c>
                return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e01b      	b.n	800139c <HAL_RCC_OscConfig+0x66c>
  return HAL_OK;
 8001364:	2300      	movs	r3, #0
 8001366:	e019      	b.n	800139c <HAL_RCC_OscConfig+0x66c>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001368:	f7ff fac0 	bl	80008ec <HAL_GetTick>
 800136c:	1b00      	subs	r0, r0, r4
 800136e:	2802      	cmp	r0, #2
 8001370:	d81b      	bhi.n	80013aa <HAL_RCC_OscConfig+0x67a>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <HAL_RCC_OscConfig+0x684>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800137a:	d0f5      	beq.n	8001368 <HAL_RCC_OscConfig+0x638>
  return HAL_OK;
 800137c:	2300      	movs	r3, #0
 800137e:	e00d      	b.n	800139c <HAL_RCC_OscConfig+0x66c>
 8001380:	2300      	movs	r3, #0
 8001382:	e00b      	b.n	800139c <HAL_RCC_OscConfig+0x66c>
    return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
}
 8001386:	4618      	mov	r0, r3
 8001388:	4770      	bx	lr
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e006      	b.n	800139c <HAL_RCC_OscConfig+0x66c>
            return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e004      	b.n	800139c <HAL_RCC_OscConfig+0x66c>
        return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e002      	b.n	800139c <HAL_RCC_OscConfig+0x66c>
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e000      	b.n	800139c <HAL_RCC_OscConfig+0x66c>
  return HAL_OK;
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	b003      	add	sp, #12
 80013a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e7fa      	b.n	800139c <HAL_RCC_OscConfig+0x66c>
  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
 80013a8:	e7f8      	b.n	800139c <HAL_RCC_OscConfig+0x66c>
              return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e7f6      	b.n	800139c <HAL_RCC_OscConfig+0x66c>
        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e7f4      	b.n	800139c <HAL_RCC_OscConfig+0x66c>
 80013b2:	bf00      	nop
 80013b4:	40021000 	.word	0x40021000
 80013b8:	019d808c 	.word	0x019d808c

080013bc <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80013bc:	2800      	cmp	r0, #0
 80013be:	f000 809b 	beq.w	80014f8 <HAL_RCC_ClockConfig+0x13c>
{
 80013c2:	b570      	push	{r4, r5, r6, lr}
 80013c4:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013c6:	4b4e      	ldr	r3, [pc, #312]	; (8001500 <HAL_RCC_ClockConfig+0x144>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	428b      	cmp	r3, r1
 80013d0:	d20c      	bcs.n	80013ec <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013d2:	4a4b      	ldr	r2, [pc, #300]	; (8001500 <HAL_RCC_ClockConfig+0x144>)
 80013d4:	6813      	ldr	r3, [r2, #0]
 80013d6:	f023 0307 	bic.w	r3, r3, #7
 80013da:	430b      	orrs	r3, r1
 80013dc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013de:	6813      	ldr	r3, [r2, #0]
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	428b      	cmp	r3, r1
 80013e6:	d001      	beq.n	80013ec <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 80013e8:	2001      	movs	r0, #1
}
 80013ea:	bd70      	pop	{r4, r5, r6, pc}
 80013ec:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013ee:	6823      	ldr	r3, [r4, #0]
 80013f0:	f013 0f01 	tst.w	r3, #1
 80013f4:	d039      	beq.n	800146a <HAL_RCC_ClockConfig+0xae>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013f6:	6863      	ldr	r3, [r4, #4]
 80013f8:	2b03      	cmp	r3, #3
 80013fa:	d009      	beq.n	8001410 <HAL_RCC_ClockConfig+0x54>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d026      	beq.n	800144e <HAL_RCC_ClockConfig+0x92>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001400:	bb63      	cbnz	r3, 800145c <HAL_RCC_ClockConfig+0xa0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001402:	4a40      	ldr	r2, [pc, #256]	; (8001504 <HAL_RCC_ClockConfig+0x148>)
 8001404:	6812      	ldr	r2, [r2, #0]
 8001406:	f012 0f02 	tst.w	r2, #2
 800140a:	d106      	bne.n	800141a <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 800140c:	2001      	movs	r0, #1
 800140e:	e7ec      	b.n	80013ea <HAL_RCC_ClockConfig+0x2e>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001410:	4a3c      	ldr	r2, [pc, #240]	; (8001504 <HAL_RCC_ClockConfig+0x148>)
 8001412:	6812      	ldr	r2, [r2, #0]
 8001414:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001418:	d070      	beq.n	80014fc <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800141a:	493a      	ldr	r1, [pc, #232]	; (8001504 <HAL_RCC_ClockConfig+0x148>)
 800141c:	688a      	ldr	r2, [r1, #8]
 800141e:	f022 0203 	bic.w	r2, r2, #3
 8001422:	4313      	orrs	r3, r2
 8001424:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001426:	f7ff fa61 	bl	80008ec <HAL_GetTick>
 800142a:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800142c:	4b35      	ldr	r3, [pc, #212]	; (8001504 <HAL_RCC_ClockConfig+0x148>)
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f003 030c 	and.w	r3, r3, #12
 8001434:	6862      	ldr	r2, [r4, #4]
 8001436:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800143a:	d016      	beq.n	800146a <HAL_RCC_ClockConfig+0xae>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800143c:	f7ff fa56 	bl	80008ec <HAL_GetTick>
 8001440:	1b80      	subs	r0, r0, r6
 8001442:	f241 3388 	movw	r3, #5000	; 0x1388
 8001446:	4298      	cmp	r0, r3
 8001448:	d9f0      	bls.n	800142c <HAL_RCC_ClockConfig+0x70>
        return HAL_TIMEOUT;
 800144a:	2003      	movs	r0, #3
 800144c:	e7cd      	b.n	80013ea <HAL_RCC_ClockConfig+0x2e>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800144e:	4a2d      	ldr	r2, [pc, #180]	; (8001504 <HAL_RCC_ClockConfig+0x148>)
 8001450:	6812      	ldr	r2, [r2, #0]
 8001452:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001456:	d1e0      	bne.n	800141a <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 8001458:	2001      	movs	r0, #1
 800145a:	e7c6      	b.n	80013ea <HAL_RCC_ClockConfig+0x2e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800145c:	4a29      	ldr	r2, [pc, #164]	; (8001504 <HAL_RCC_ClockConfig+0x148>)
 800145e:	6812      	ldr	r2, [r2, #0]
 8001460:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001464:	d1d9      	bne.n	800141a <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 8001466:	2001      	movs	r0, #1
 8001468:	e7bf      	b.n	80013ea <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800146a:	6823      	ldr	r3, [r4, #0]
 800146c:	f013 0f02 	tst.w	r3, #2
 8001470:	d006      	beq.n	8001480 <HAL_RCC_ClockConfig+0xc4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001472:	4a24      	ldr	r2, [pc, #144]	; (8001504 <HAL_RCC_ClockConfig+0x148>)
 8001474:	6893      	ldr	r3, [r2, #8]
 8001476:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800147a:	68a1      	ldr	r1, [r4, #8]
 800147c:	430b      	orrs	r3, r1
 800147e:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001480:	4b1f      	ldr	r3, [pc, #124]	; (8001500 <HAL_RCC_ClockConfig+0x144>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	42ab      	cmp	r3, r5
 800148a:	d90c      	bls.n	80014a6 <HAL_RCC_ClockConfig+0xea>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800148c:	4a1c      	ldr	r2, [pc, #112]	; (8001500 <HAL_RCC_ClockConfig+0x144>)
 800148e:	6813      	ldr	r3, [r2, #0]
 8001490:	f023 0307 	bic.w	r3, r3, #7
 8001494:	432b      	orrs	r3, r5
 8001496:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001498:	6813      	ldr	r3, [r2, #0]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	42ab      	cmp	r3, r5
 80014a0:	d001      	beq.n	80014a6 <HAL_RCC_ClockConfig+0xea>
      return HAL_ERROR;
 80014a2:	2001      	movs	r0, #1
 80014a4:	e7a1      	b.n	80013ea <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a6:	6823      	ldr	r3, [r4, #0]
 80014a8:	f013 0f04 	tst.w	r3, #4
 80014ac:	d006      	beq.n	80014bc <HAL_RCC_ClockConfig+0x100>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014ae:	4a15      	ldr	r2, [pc, #84]	; (8001504 <HAL_RCC_ClockConfig+0x148>)
 80014b0:	6893      	ldr	r3, [r2, #8]
 80014b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014b6:	68e1      	ldr	r1, [r4, #12]
 80014b8:	430b      	orrs	r3, r1
 80014ba:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014bc:	6823      	ldr	r3, [r4, #0]
 80014be:	f013 0f08 	tst.w	r3, #8
 80014c2:	d007      	beq.n	80014d4 <HAL_RCC_ClockConfig+0x118>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014c4:	4a0f      	ldr	r2, [pc, #60]	; (8001504 <HAL_RCC_ClockConfig+0x148>)
 80014c6:	6893      	ldr	r3, [r2, #8]
 80014c8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80014cc:	6921      	ldr	r1, [r4, #16]
 80014ce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80014d2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014d4:	f7ff fbd2 	bl	8000c7c <HAL_RCC_GetSysClockFreq>
 80014d8:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <HAL_RCC_ClockConfig+0x148>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80014e0:	4a09      	ldr	r2, [pc, #36]	; (8001508 <HAL_RCC_ClockConfig+0x14c>)
 80014e2:	5cd3      	ldrb	r3, [r2, r3]
 80014e4:	f003 031f 	and.w	r3, r3, #31
 80014e8:	40d8      	lsrs	r0, r3
 80014ea:	4b08      	ldr	r3, [pc, #32]	; (800150c <HAL_RCC_ClockConfig+0x150>)
 80014ec:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <HAL_RCC_ClockConfig+0x154>)
 80014f0:	6818      	ldr	r0, [r3, #0]
 80014f2:	f7ff f9b9 	bl	8000868 <HAL_InitTick>
  return status;
 80014f6:	e778      	b.n	80013ea <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80014f8:	2001      	movs	r0, #1
}
 80014fa:	4770      	bx	lr
        return HAL_ERROR;
 80014fc:	2001      	movs	r0, #1
 80014fe:	e774      	b.n	80013ea <HAL_RCC_ClockConfig+0x2e>
 8001500:	40022000 	.word	0x40022000
 8001504:	40021000 	.word	0x40021000
 8001508:	08002828 	.word	0x08002828
 800150c:	20000000 	.word	0x20000000
 8001510:	20000008 	.word	0x20000008

08001514 <HAL_RCC_GetHCLKFreq>:
}
 8001514:	4b01      	ldr	r3, [pc, #4]	; (800151c <HAL_RCC_GetHCLKFreq+0x8>)
 8001516:	6818      	ldr	r0, [r3, #0]
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20000000 	.word	0x20000000

08001520 <HAL_RCC_GetPCLK1Freq>:
{
 8001520:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001522:	f7ff fff7 	bl	8001514 <HAL_RCC_GetHCLKFreq>
 8001526:	4b05      	ldr	r3, [pc, #20]	; (800153c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800152e:	4a04      	ldr	r2, [pc, #16]	; (8001540 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001530:	5cd3      	ldrb	r3, [r2, r3]
 8001532:	f003 031f 	and.w	r3, r3, #31
}
 8001536:	40d8      	lsrs	r0, r3
 8001538:	bd08      	pop	{r3, pc}
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000
 8001540:	08002838 	.word	0x08002838

08001544 <HAL_RCC_GetPCLK2Freq>:
{
 8001544:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001546:	f7ff ffe5 	bl	8001514 <HAL_RCC_GetHCLKFreq>
 800154a:	4b05      	ldr	r3, [pc, #20]	; (8001560 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001552:	4a04      	ldr	r2, [pc, #16]	; (8001564 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001554:	5cd3      	ldrb	r3, [r2, r3]
 8001556:	f003 031f 	and.w	r3, r3, #31
}
 800155a:	40d8      	lsrs	r0, r3
 800155c:	bd08      	pop	{r3, pc}
 800155e:	bf00      	nop
 8001560:	40021000 	.word	0x40021000
 8001564:	08002838 	.word	0x08002838

08001568 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800156a:	4b59      	ldr	r3, [pc, #356]	; (80016d0 <RCCEx_PLLSAI1_Config+0x168>)
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	f013 0f03 	tst.w	r3, #3
 8001572:	d018      	beq.n	80015a6 <RCCEx_PLLSAI1_Config+0x3e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001574:	4b56      	ldr	r3, [pc, #344]	; (80016d0 <RCCEx_PLLSAI1_Config+0x168>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	f003 0303 	and.w	r3, r3, #3
 800157c:	6802      	ldr	r2, [r0, #0]
 800157e:	4293      	cmp	r3, r2
 8001580:	d002      	beq.n	8001588 <RCCEx_PLLSAI1_Config+0x20>
 8001582:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 8001584:	4628      	mov	r0, r5
 8001586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8001588:	2a00      	cmp	r2, #0
 800158a:	f000 809f 	beq.w	80016cc <RCCEx_PLLSAI1_Config+0x164>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800158e:	4b50      	ldr	r3, [pc, #320]	; (80016d0 <RCCEx_PLLSAI1_Config+0x168>)
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001596:	3301      	adds	r3, #1
 8001598:	6842      	ldr	r2, [r0, #4]
       ||
 800159a:	4293      	cmp	r3, r2
 800159c:	d001      	beq.n	80015a2 <RCCEx_PLLSAI1_Config+0x3a>
 800159e:	2501      	movs	r5, #1
 80015a0:	e7f0      	b.n	8001584 <RCCEx_PLLSAI1_Config+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 80015a2:	2500      	movs	r5, #0
 80015a4:	e01a      	b.n	80015dc <RCCEx_PLLSAI1_Config+0x74>
    switch(PllSai1->PLLSAI1Source)
 80015a6:	6803      	ldr	r3, [r0, #0]
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d058      	beq.n	800165e <RCCEx_PLLSAI1_Config+0xf6>
 80015ac:	2b03      	cmp	r3, #3
 80015ae:	d05d      	beq.n	800166c <RCCEx_PLLSAI1_Config+0x104>
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d001      	beq.n	80015b8 <RCCEx_PLLSAI1_Config+0x50>
      status = HAL_ERROR;
 80015b4:	2501      	movs	r5, #1
 80015b6:	e00f      	b.n	80015d8 <RCCEx_PLLSAI1_Config+0x70>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80015b8:	4a45      	ldr	r2, [pc, #276]	; (80016d0 <RCCEx_PLLSAI1_Config+0x168>)
 80015ba:	6812      	ldr	r2, [r2, #0]
 80015bc:	f012 0f02 	tst.w	r2, #2
 80015c0:	d060      	beq.n	8001684 <RCCEx_PLLSAI1_Config+0x11c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80015c2:	4d43      	ldr	r5, [pc, #268]	; (80016d0 <RCCEx_PLLSAI1_Config+0x168>)
 80015c4:	68ea      	ldr	r2, [r5, #12]
 80015c6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80015ca:	6844      	ldr	r4, [r0, #4]
 80015cc:	3c01      	subs	r4, #1
 80015ce:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80015d2:	4313      	orrs	r3, r2
 80015d4:	60eb      	str	r3, [r5, #12]
 80015d6:	2500      	movs	r5, #0
  if(status == HAL_OK)
 80015d8:	2d00      	cmp	r5, #0
 80015da:	d1d3      	bne.n	8001584 <RCCEx_PLLSAI1_Config+0x1c>
 80015dc:	460f      	mov	r7, r1
 80015de:	4604      	mov	r4, r0
    __HAL_RCC_PLLSAI1_DISABLE();
 80015e0:	4a3b      	ldr	r2, [pc, #236]	; (80016d0 <RCCEx_PLLSAI1_Config+0x168>)
 80015e2:	6813      	ldr	r3, [r2, #0]
 80015e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80015e8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80015ea:	f7ff f97f 	bl	80008ec <HAL_GetTick>
 80015ee:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80015f0:	4b37      	ldr	r3, [pc, #220]	; (80016d0 <RCCEx_PLLSAI1_Config+0x168>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80015f8:	d005      	beq.n	8001606 <RCCEx_PLLSAI1_Config+0x9e>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80015fa:	f7ff f977 	bl	80008ec <HAL_GetTick>
 80015fe:	1b80      	subs	r0, r0, r6
 8001600:	2802      	cmp	r0, #2
 8001602:	d9f5      	bls.n	80015f0 <RCCEx_PLLSAI1_Config+0x88>
        status = HAL_TIMEOUT;
 8001604:	2503      	movs	r5, #3
    if(status == HAL_OK)
 8001606:	2d00      	cmp	r5, #0
 8001608:	d1bc      	bne.n	8001584 <RCCEx_PLLSAI1_Config+0x1c>
      if(Divider == DIVIDER_P_UPDATE)
 800160a:	2f00      	cmp	r7, #0
 800160c:	d13c      	bne.n	8001688 <RCCEx_PLLSAI1_Config+0x120>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800160e:	4930      	ldr	r1, [pc, #192]	; (80016d0 <RCCEx_PLLSAI1_Config+0x168>)
 8001610:	690b      	ldr	r3, [r1, #16]
 8001612:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8001616:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800161a:	68a0      	ldr	r0, [r4, #8]
 800161c:	68e2      	ldr	r2, [r4, #12]
 800161e:	06d2      	lsls	r2, r2, #27
 8001620:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001624:	4313      	orrs	r3, r2
 8001626:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8001628:	4a29      	ldr	r2, [pc, #164]	; (80016d0 <RCCEx_PLLSAI1_Config+0x168>)
 800162a:	6813      	ldr	r3, [r2, #0]
 800162c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001630:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001632:	f7ff f95b 	bl	80008ec <HAL_GetTick>
 8001636:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001638:	4b25      	ldr	r3, [pc, #148]	; (80016d0 <RCCEx_PLLSAI1_Config+0x168>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001640:	d105      	bne.n	800164e <RCCEx_PLLSAI1_Config+0xe6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001642:	f7ff f953 	bl	80008ec <HAL_GetTick>
 8001646:	1b80      	subs	r0, r0, r6
 8001648:	2802      	cmp	r0, #2
 800164a:	d9f5      	bls.n	8001638 <RCCEx_PLLSAI1_Config+0xd0>
          status = HAL_TIMEOUT;
 800164c:	2503      	movs	r5, #3
      if(status == HAL_OK)
 800164e:	2d00      	cmp	r5, #0
 8001650:	d198      	bne.n	8001584 <RCCEx_PLLSAI1_Config+0x1c>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001652:	4a1f      	ldr	r2, [pc, #124]	; (80016d0 <RCCEx_PLLSAI1_Config+0x168>)
 8001654:	6913      	ldr	r3, [r2, #16]
 8001656:	69a1      	ldr	r1, [r4, #24]
 8001658:	430b      	orrs	r3, r1
 800165a:	6113      	str	r3, [r2, #16]
 800165c:	e792      	b.n	8001584 <RCCEx_PLLSAI1_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800165e:	4a1c      	ldr	r2, [pc, #112]	; (80016d0 <RCCEx_PLLSAI1_Config+0x168>)
 8001660:	6812      	ldr	r2, [r2, #0]
 8001662:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001666:	d1ac      	bne.n	80015c2 <RCCEx_PLLSAI1_Config+0x5a>
        status = HAL_ERROR;
 8001668:	2501      	movs	r5, #1
 800166a:	e7b5      	b.n	80015d8 <RCCEx_PLLSAI1_Config+0x70>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800166c:	4a18      	ldr	r2, [pc, #96]	; (80016d0 <RCCEx_PLLSAI1_Config+0x168>)
 800166e:	6812      	ldr	r2, [r2, #0]
 8001670:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001674:	d1a5      	bne.n	80015c2 <RCCEx_PLLSAI1_Config+0x5a>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001676:	4a16      	ldr	r2, [pc, #88]	; (80016d0 <RCCEx_PLLSAI1_Config+0x168>)
 8001678:	6812      	ldr	r2, [r2, #0]
 800167a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800167e:	d1a0      	bne.n	80015c2 <RCCEx_PLLSAI1_Config+0x5a>
          status = HAL_ERROR;
 8001680:	2501      	movs	r5, #1
 8001682:	e7a9      	b.n	80015d8 <RCCEx_PLLSAI1_Config+0x70>
        status = HAL_ERROR;
 8001684:	2501      	movs	r5, #1
 8001686:	e7a7      	b.n	80015d8 <RCCEx_PLLSAI1_Config+0x70>
      else if(Divider == DIVIDER_Q_UPDATE)
 8001688:	2f01      	cmp	r7, #1
 800168a:	d00f      	beq.n	80016ac <RCCEx_PLLSAI1_Config+0x144>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800168c:	4810      	ldr	r0, [pc, #64]	; (80016d0 <RCCEx_PLLSAI1_Config+0x168>)
 800168e:	6902      	ldr	r2, [r0, #16]
 8001690:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8001694:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001698:	68a1      	ldr	r1, [r4, #8]
 800169a:	6963      	ldr	r3, [r4, #20]
 800169c:	085b      	lsrs	r3, r3, #1
 800169e:	3b01      	subs	r3, #1
 80016a0:	065b      	lsls	r3, r3, #25
 80016a2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80016a6:	4313      	orrs	r3, r2
 80016a8:	6103      	str	r3, [r0, #16]
 80016aa:	e7bd      	b.n	8001628 <RCCEx_PLLSAI1_Config+0xc0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80016ac:	4808      	ldr	r0, [pc, #32]	; (80016d0 <RCCEx_PLLSAI1_Config+0x168>)
 80016ae:	6902      	ldr	r2, [r0, #16]
 80016b0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80016b4:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80016b8:	68a1      	ldr	r1, [r4, #8]
 80016ba:	6923      	ldr	r3, [r4, #16]
 80016bc:	085b      	lsrs	r3, r3, #1
 80016be:	3b01      	subs	r3, #1
 80016c0:	055b      	lsls	r3, r3, #21
 80016c2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80016c6:	4313      	orrs	r3, r2
 80016c8:	6103      	str	r3, [r0, #16]
 80016ca:	e7ad      	b.n	8001628 <RCCEx_PLLSAI1_Config+0xc0>
 80016cc:	2501      	movs	r5, #1
 80016ce:	e759      	b.n	8001584 <RCCEx_PLLSAI1_Config+0x1c>
 80016d0:	40021000 	.word	0x40021000

080016d4 <HAL_RCCEx_PeriphCLKConfig>:
{
 80016d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80016dc:	6803      	ldr	r3, [r0, #0]
 80016de:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80016e2:	d026      	beq.n	8001732 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    switch(PeriphClkInit->Sai1ClockSelection)
 80016e4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80016e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80016ea:	d006      	beq.n	80016fa <HAL_RCCEx_PeriphCLKConfig+0x26>
 80016ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80016f0:	d01d      	beq.n	800172e <HAL_RCCEx_PeriphCLKConfig+0x5a>
 80016f2:	b19b      	cbz	r3, 800171c <HAL_RCCEx_PeriphCLKConfig+0x48>
      ret = HAL_ERROR;
 80016f4:	2601      	movs	r6, #1
 80016f6:	4637      	mov	r7, r6
 80016f8:	e01d      	b.n	8001736 <HAL_RCCEx_PeriphCLKConfig+0x62>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80016fa:	4aae      	ldr	r2, [pc, #696]	; (80019b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80016fc:	68d3      	ldr	r3, [r2, #12]
 80016fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001702:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001704:	2700      	movs	r7, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001706:	4aab      	ldr	r2, [pc, #684]	; (80019b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001708:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800170c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001710:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001712:	430b      	orrs	r3, r1
 8001714:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001718:	2600      	movs	r6, #0
 800171a:	e00c      	b.n	8001736 <HAL_RCCEx_PeriphCLKConfig+0x62>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800171c:	2100      	movs	r1, #0
 800171e:	3004      	adds	r0, #4
 8001720:	f7ff ff22 	bl	8001568 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 8001724:	4607      	mov	r7, r0
 8001726:	2800      	cmp	r0, #0
 8001728:	d0ed      	beq.n	8001706 <HAL_RCCEx_PeriphCLKConfig+0x32>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800172a:	4606      	mov	r6, r0
 800172c:	e003      	b.n	8001736 <HAL_RCCEx_PeriphCLKConfig+0x62>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800172e:	2700      	movs	r7, #0
 8001730:	e7e9      	b.n	8001706 <HAL_RCCEx_PeriphCLKConfig+0x32>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001732:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001734:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001736:	6823      	ldr	r3, [r4, #0]
 8001738:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800173c:	d06b      	beq.n	8001816 <HAL_RCCEx_PeriphCLKConfig+0x142>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800173e:	4b9d      	ldr	r3, [pc, #628]	; (80019b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001742:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001746:	d14c      	bne.n	80017e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001748:	4b9a      	ldr	r3, [pc, #616]	; (80019b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800174a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800174c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001750:	659a      	str	r2, [r3, #88]	; 0x58
 8001752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001758:	9301      	str	r3, [sp, #4]
 800175a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800175c:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001760:	4a95      	ldr	r2, [pc, #596]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001762:	6813      	ldr	r3, [r2, #0]
 8001764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001768:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800176a:	f7ff f8bf 	bl	80008ec <HAL_GetTick>
 800176e:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001770:	4b91      	ldr	r3, [pc, #580]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001778:	d105      	bne.n	8001786 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800177a:	f7ff f8b7 	bl	80008ec <HAL_GetTick>
 800177e:	1b40      	subs	r0, r0, r5
 8001780:	2802      	cmp	r0, #2
 8001782:	d9f5      	bls.n	8001770 <HAL_RCCEx_PeriphCLKConfig+0x9c>
        ret = HAL_TIMEOUT;
 8001784:	2703      	movs	r7, #3
    if(ret == HAL_OK)
 8001786:	2f00      	cmp	r7, #0
 8001788:	d140      	bne.n	800180c <HAL_RCCEx_PeriphCLKConfig+0x138>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800178a:	4b8a      	ldr	r3, [pc, #552]	; (80019b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800178c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001790:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001794:	d015      	beq.n	80017c2 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8001796:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001798:	429a      	cmp	r2, r3
 800179a:	d012      	beq.n	80017c2 <HAL_RCCEx_PeriphCLKConfig+0xee>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800179c:	4a85      	ldr	r2, [pc, #532]	; (80019b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800179e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80017a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80017a6:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80017aa:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80017ae:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80017b2:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80017b6:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80017ba:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80017be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80017c2:	f013 0f01 	tst.w	r3, #1
 80017c6:	d10f      	bne.n	80017e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      if(ret == HAL_OK)
 80017c8:	2f00      	cmp	r7, #0
 80017ca:	f040 80c9 	bne.w	8001960 <HAL_RCCEx_PeriphCLKConfig+0x28c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80017ce:	4a79      	ldr	r2, [pc, #484]	; (80019b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80017d0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80017d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017d8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80017da:	430b      	orrs	r3, r1
 80017dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017e0:	e015      	b.n	800180e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    FlagStatus       pwrclkchanged = RESET;
 80017e2:	f04f 0800 	mov.w	r8, #0
 80017e6:	e7bb      	b.n	8001760 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        tickstart = HAL_GetTick();
 80017e8:	f7ff f880 	bl	80008ec <HAL_GetTick>
 80017ec:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017ee:	4b71      	ldr	r3, [pc, #452]	; (80019b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80017f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f4:	f013 0f02 	tst.w	r3, #2
 80017f8:	d1e6      	bne.n	80017c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017fa:	f7ff f877 	bl	80008ec <HAL_GetTick>
 80017fe:	1b40      	subs	r0, r0, r5
 8001800:	f241 3388 	movw	r3, #5000	; 0x1388
 8001804:	4298      	cmp	r0, r3
 8001806:	d9f2      	bls.n	80017ee <HAL_RCCEx_PeriphCLKConfig+0x11a>
            ret = HAL_TIMEOUT;
 8001808:	2703      	movs	r7, #3
 800180a:	e7dd      	b.n	80017c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      status = ret;
 800180c:	463e      	mov	r6, r7
    if(pwrclkchanged == SET)
 800180e:	f1b8 0f00 	cmp.w	r8, #0
 8001812:	f040 80a7 	bne.w	8001964 <HAL_RCCEx_PeriphCLKConfig+0x290>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001816:	6823      	ldr	r3, [r4, #0]
 8001818:	f013 0f01 	tst.w	r3, #1
 800181c:	d008      	beq.n	8001830 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800181e:	4a65      	ldr	r2, [pc, #404]	; (80019b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001820:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001824:	f023 0303 	bic.w	r3, r3, #3
 8001828:	6a21      	ldr	r1, [r4, #32]
 800182a:	430b      	orrs	r3, r1
 800182c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001830:	6823      	ldr	r3, [r4, #0]
 8001832:	f013 0f02 	tst.w	r3, #2
 8001836:	d008      	beq.n	800184a <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001838:	4a5e      	ldr	r2, [pc, #376]	; (80019b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800183a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800183e:	f023 030c 	bic.w	r3, r3, #12
 8001842:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001844:	430b      	orrs	r3, r1
 8001846:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800184a:	6823      	ldr	r3, [r4, #0]
 800184c:	f013 0f20 	tst.w	r3, #32
 8001850:	d008      	beq.n	8001864 <HAL_RCCEx_PeriphCLKConfig+0x190>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001852:	4a58      	ldr	r2, [pc, #352]	; (80019b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001854:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001858:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800185c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800185e:	430b      	orrs	r3, r1
 8001860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001864:	6823      	ldr	r3, [r4, #0]
 8001866:	f413 7f00 	tst.w	r3, #512	; 0x200
 800186a:	d008      	beq.n	800187e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800186c:	4a51      	ldr	r2, [pc, #324]	; (80019b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800186e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001872:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001876:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001878:	430b      	orrs	r3, r1
 800187a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800187e:	6823      	ldr	r3, [r4, #0]
 8001880:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001884:	d008      	beq.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001886:	4a4b      	ldr	r2, [pc, #300]	; (80019b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001888:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800188c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001890:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001892:	430b      	orrs	r3, r1
 8001894:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001898:	6823      	ldr	r3, [r4, #0]
 800189a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800189e:	d008      	beq.n	80018b2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80018a0:	4a44      	ldr	r2, [pc, #272]	; (80019b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80018a2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80018a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018aa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80018ac:	430b      	orrs	r3, r1
 80018ae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80018b2:	6823      	ldr	r3, [r4, #0]
 80018b4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80018b8:	d008      	beq.n	80018cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80018ba:	4a3e      	ldr	r2, [pc, #248]	; (80019b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80018bc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80018c0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80018c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80018c6:	430b      	orrs	r3, r1
 80018c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80018cc:	6823      	ldr	r3, [r4, #0]
 80018ce:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80018d2:	d00f      	beq.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80018d4:	4a37      	ldr	r2, [pc, #220]	; (80019b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80018d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80018da:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80018de:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80018e0:	430b      	orrs	r3, r1
 80018e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80018e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80018ec:	d040      	beq.n	8001970 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80018ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80018f2:	d042      	beq.n	800197a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80018f4:	6823      	ldr	r3, [r4, #0]
 80018f6:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80018fa:	d00f      	beq.n	800191c <HAL_RCCEx_PeriphCLKConfig+0x248>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80018fc:	4a2d      	ldr	r2, [pc, #180]	; (80019b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80018fe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001902:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001906:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001908:	430b      	orrs	r3, r1
 800190a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800190e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001910:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001914:	d039      	beq.n	800198a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001916:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800191a:	d03b      	beq.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800191c:	6823      	ldr	r3, [r4, #0]
 800191e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001922:	d00c      	beq.n	800193e <HAL_RCCEx_PeriphCLKConfig+0x26a>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001924:	4a23      	ldr	r2, [pc, #140]	; (80019b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001926:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800192a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800192e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001930:	430b      	orrs	r3, r1
 8001932:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001936:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001938:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800193c:	d032      	beq.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800193e:	6823      	ldr	r3, [r4, #0]
 8001940:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001944:	d008      	beq.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001946:	4a1b      	ldr	r2, [pc, #108]	; (80019b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001948:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800194c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001950:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001952:	430b      	orrs	r3, r1
 8001954:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8001958:	4630      	mov	r0, r6
 800195a:	b002      	add	sp, #8
 800195c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 8001960:	463e      	mov	r6, r7
 8001962:	e754      	b.n	800180e <HAL_RCCEx_PeriphCLKConfig+0x13a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001964:	4a13      	ldr	r2, [pc, #76]	; (80019b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001966:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800196c:	6593      	str	r3, [r2, #88]	; 0x58
 800196e:	e752      	b.n	8001816 <HAL_RCCEx_PeriphCLKConfig+0x142>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001970:	68d3      	ldr	r3, [r2, #12]
 8001972:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001976:	60d3      	str	r3, [r2, #12]
 8001978:	e7bc      	b.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0x220>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800197a:	2101      	movs	r1, #1
 800197c:	1d20      	adds	r0, r4, #4
 800197e:	f7ff fdf3 	bl	8001568 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8001982:	2800      	cmp	r0, #0
 8001984:	d0b6      	beq.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0x220>
          status = ret;
 8001986:	4606      	mov	r6, r0
 8001988:	e7b4      	b.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800198a:	68d3      	ldr	r3, [r2, #12]
 800198c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001990:	60d3      	str	r3, [r2, #12]
 8001992:	e7c3      	b.n	800191c <HAL_RCCEx_PeriphCLKConfig+0x248>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001994:	2101      	movs	r1, #1
 8001996:	1d20      	adds	r0, r4, #4
 8001998:	f7ff fde6 	bl	8001568 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800199c:	2800      	cmp	r0, #0
 800199e:	d0bd      	beq.n	800191c <HAL_RCCEx_PeriphCLKConfig+0x248>
        status = ret;
 80019a0:	4606      	mov	r6, r0
 80019a2:	e7bb      	b.n	800191c <HAL_RCCEx_PeriphCLKConfig+0x248>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80019a4:	2102      	movs	r1, #2
 80019a6:	1d20      	adds	r0, r4, #4
 80019a8:	f7ff fdde 	bl	8001568 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80019ac:	2800      	cmp	r0, #0
 80019ae:	d0c6      	beq.n	800193e <HAL_RCCEx_PeriphCLKConfig+0x26a>
        status = ret;
 80019b0:	4606      	mov	r6, r0
 80019b2:	e7c4      	b.n	800193e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80019b4:	40021000 	.word	0x40021000
 80019b8:	40007000 	.word	0x40007000

080019bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80019bc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80019be:	6a03      	ldr	r3, [r0, #32]
 80019c0:	f023 0301 	bic.w	r3, r3, #1
 80019c4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80019c6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80019c8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80019ca:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80019cc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80019d0:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80019d4:	680d      	ldr	r5, [r1, #0]
 80019d6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80019d8:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80019dc:	688d      	ldr	r5, [r1, #8]
 80019de:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80019e0:	4d14      	ldr	r5, [pc, #80]	; (8001a34 <TIM_OC1_SetConfig+0x78>)
 80019e2:	42a8      	cmp	r0, r5
 80019e4:	d007      	beq.n	80019f6 <TIM_OC1_SetConfig+0x3a>
 80019e6:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80019ea:	42a8      	cmp	r0, r5
 80019ec:	d003      	beq.n	80019f6 <TIM_OC1_SetConfig+0x3a>
 80019ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019f2:	42a8      	cmp	r0, r5
 80019f4:	d105      	bne.n	8001a02 <TIM_OC1_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80019f6:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80019fa:	68cd      	ldr	r5, [r1, #12]
 80019fc:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80019fe:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a02:	4d0c      	ldr	r5, [pc, #48]	; (8001a34 <TIM_OC1_SetConfig+0x78>)
 8001a04:	42a8      	cmp	r0, r5
 8001a06:	d007      	beq.n	8001a18 <TIM_OC1_SetConfig+0x5c>
 8001a08:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001a0c:	42a8      	cmp	r0, r5
 8001a0e:	d003      	beq.n	8001a18 <TIM_OC1_SetConfig+0x5c>
 8001a10:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a14:	42a8      	cmp	r0, r5
 8001a16:	d105      	bne.n	8001a24 <TIM_OC1_SetConfig+0x68>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001a18:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001a1c:	694c      	ldr	r4, [r1, #20]
 8001a1e:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001a20:	698d      	ldr	r5, [r1, #24]
 8001a22:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a24:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001a26:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001a28:	684a      	ldr	r2, [r1, #4]
 8001a2a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a2c:	6203      	str	r3, [r0, #32]
}
 8001a2e:	bc30      	pop	{r4, r5}
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40012c00 	.word	0x40012c00

08001a38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001a38:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001a3a:	6a03      	ldr	r3, [r0, #32]
 8001a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a40:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a42:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a44:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001a46:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001a48:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8001a4c:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a50:	680d      	ldr	r5, [r1, #0]
 8001a52:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001a54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001a58:	688d      	ldr	r5, [r1, #8]
 8001a5a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001a5e:	4d12      	ldr	r5, [pc, #72]	; (8001aa8 <TIM_OC3_SetConfig+0x70>)
 8001a60:	42a8      	cmp	r0, r5
 8001a62:	d019      	beq.n	8001a98 <TIM_OC3_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a64:	4d10      	ldr	r5, [pc, #64]	; (8001aa8 <TIM_OC3_SetConfig+0x70>)
 8001a66:	42a8      	cmp	r0, r5
 8001a68:	d007      	beq.n	8001a7a <TIM_OC3_SetConfig+0x42>
 8001a6a:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001a6e:	42a8      	cmp	r0, r5
 8001a70:	d003      	beq.n	8001a7a <TIM_OC3_SetConfig+0x42>
 8001a72:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a76:	42a8      	cmp	r0, r5
 8001a78:	d107      	bne.n	8001a8a <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001a7a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001a7e:	694d      	ldr	r5, [r1, #20]
 8001a80:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001a84:	698d      	ldr	r5, [r1, #24]
 8001a86:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a8a:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001a8c:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001a8e:	684a      	ldr	r2, [r1, #4]
 8001a90:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a92:	6203      	str	r3, [r0, #32]
}
 8001a94:	bc30      	pop	{r4, r5}
 8001a96:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8001a98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001a9c:	68cd      	ldr	r5, [r1, #12]
 8001a9e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8001aa2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001aa6:	e7dd      	b.n	8001a64 <TIM_OC3_SetConfig+0x2c>
 8001aa8:	40012c00 	.word	0x40012c00

08001aac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001aac:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001aae:	6a03      	ldr	r3, [r0, #32]
 8001ab0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ab4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ab6:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ab8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001aba:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001abc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ac0:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ac4:	680d      	ldr	r5, [r1, #0]
 8001ac6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001aca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001ace:	688d      	ldr	r5, [r1, #8]
 8001ad0:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ad4:	4d0b      	ldr	r5, [pc, #44]	; (8001b04 <TIM_OC4_SetConfig+0x58>)
 8001ad6:	42a8      	cmp	r0, r5
 8001ad8:	d007      	beq.n	8001aea <TIM_OC4_SetConfig+0x3e>
 8001ada:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001ade:	42a8      	cmp	r0, r5
 8001ae0:	d003      	beq.n	8001aea <TIM_OC4_SetConfig+0x3e>
 8001ae2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ae6:	42a8      	cmp	r0, r5
 8001ae8:	d104      	bne.n	8001af4 <TIM_OC4_SetConfig+0x48>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001aea:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001aee:	694d      	ldr	r5, [r1, #20]
 8001af0:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001af4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001af6:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001af8:	684b      	ldr	r3, [r1, #4]
 8001afa:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001afc:	6202      	str	r2, [r0, #32]
}
 8001afe:	bc30      	pop	{r4, r5}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	40012c00 	.word	0x40012c00

08001b08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8001b08:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001b0a:	6a03      	ldr	r3, [r0, #32]
 8001b0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b10:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b12:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b14:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001b16:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001b18:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b1c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001b20:	680d      	ldr	r5, [r1, #0]
 8001b22:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8001b24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001b28:	688d      	ldr	r5, [r1, #8]
 8001b2a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b2e:	4d0b      	ldr	r5, [pc, #44]	; (8001b5c <TIM_OC5_SetConfig+0x54>)
 8001b30:	42a8      	cmp	r0, r5
 8001b32:	d007      	beq.n	8001b44 <TIM_OC5_SetConfig+0x3c>
 8001b34:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001b38:	42a8      	cmp	r0, r5
 8001b3a:	d003      	beq.n	8001b44 <TIM_OC5_SetConfig+0x3c>
 8001b3c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b40:	42a8      	cmp	r0, r5
 8001b42:	d104      	bne.n	8001b4e <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001b44:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001b48:	694d      	ldr	r5, [r1, #20]
 8001b4a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b4e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001b50:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8001b52:	684a      	ldr	r2, [r1, #4]
 8001b54:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b56:	6203      	str	r3, [r0, #32]
}
 8001b58:	bc30      	pop	{r4, r5}
 8001b5a:	4770      	bx	lr
 8001b5c:	40012c00 	.word	0x40012c00

08001b60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8001b60:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001b62:	6a03      	ldr	r3, [r0, #32]
 8001b64:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001b68:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b6a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b6c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001b6e:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001b70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b78:	680d      	ldr	r5, [r1, #0]
 8001b7a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001b7e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001b82:	688d      	ldr	r5, [r1, #8]
 8001b84:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b88:	4d0b      	ldr	r5, [pc, #44]	; (8001bb8 <TIM_OC6_SetConfig+0x58>)
 8001b8a:	42a8      	cmp	r0, r5
 8001b8c:	d007      	beq.n	8001b9e <TIM_OC6_SetConfig+0x3e>
 8001b8e:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001b92:	42a8      	cmp	r0, r5
 8001b94:	d003      	beq.n	8001b9e <TIM_OC6_SetConfig+0x3e>
 8001b96:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b9a:	42a8      	cmp	r0, r5
 8001b9c:	d104      	bne.n	8001ba8 <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001b9e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001ba2:	694d      	ldr	r5, [r1, #20]
 8001ba4:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ba8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001baa:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8001bac:	684b      	ldr	r3, [r1, #4]
 8001bae:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001bb0:	6202      	str	r2, [r0, #32]
}
 8001bb2:	bc30      	pop	{r4, r5}
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40012c00 	.word	0x40012c00

08001bbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001bbc:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001bbe:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001bc0:	6a04      	ldr	r4, [r0, #32]
 8001bc2:	f024 0401 	bic.w	r4, r4, #1
 8001bc6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001bc8:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001bca:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001bce:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001bd2:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8001bd6:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001bd8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001bda:	6203      	str	r3, [r0, #32]
}
 8001bdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001be2:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001be4:	6a03      	ldr	r3, [r0, #32]
 8001be6:	f023 0310 	bic.w	r3, r3, #16
 8001bea:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001bec:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001bee:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001bf0:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001bf4:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001bf8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001bfc:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001c00:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001c02:	6203      	str	r3, [r0, #32]
}
 8001c04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001c0a:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001c10:	4319      	orrs	r1, r3
 8001c12:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c16:	6081      	str	r1, [r0, #8]
}
 8001c18:	4770      	bx	lr

08001c1a <HAL_TIM_OC_MspInit>:
}
 8001c1a:	4770      	bx	lr

08001c1c <HAL_TIM_PeriodElapsedCallback>:
}
 8001c1c:	4770      	bx	lr

08001c1e <HAL_TIM_OC_DelayElapsedCallback>:
}
 8001c1e:	4770      	bx	lr

08001c20 <HAL_TIM_IC_CaptureCallback>:
}
 8001c20:	4770      	bx	lr

08001c22 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8001c22:	4770      	bx	lr

08001c24 <HAL_TIM_TriggerCallback>:
}
 8001c24:	4770      	bx	lr

08001c26 <HAL_TIM_IRQHandler>:
{
 8001c26:	b510      	push	{r4, lr}
 8001c28:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c2a:	6803      	ldr	r3, [r0, #0]
 8001c2c:	691a      	ldr	r2, [r3, #16]
 8001c2e:	f012 0f02 	tst.w	r2, #2
 8001c32:	d011      	beq.n	8001c58 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	f012 0f02 	tst.w	r2, #2
 8001c3a:	d00d      	beq.n	8001c58 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c3c:	f06f 0202 	mvn.w	r2, #2
 8001c40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c42:	2301      	movs	r3, #1
 8001c44:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c46:	6803      	ldr	r3, [r0, #0]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	f013 0f03 	tst.w	r3, #3
 8001c4e:	d079      	beq.n	8001d44 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8001c50:	f7ff ffe6 	bl	8001c20 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c54:	2300      	movs	r3, #0
 8001c56:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c58:	6823      	ldr	r3, [r4, #0]
 8001c5a:	691a      	ldr	r2, [r3, #16]
 8001c5c:	f012 0f04 	tst.w	r2, #4
 8001c60:	d012      	beq.n	8001c88 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c62:	68da      	ldr	r2, [r3, #12]
 8001c64:	f012 0f04 	tst.w	r2, #4
 8001c68:	d00e      	beq.n	8001c88 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c6a:	f06f 0204 	mvn.w	r2, #4
 8001c6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c70:	2302      	movs	r3, #2
 8001c72:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c74:	6823      	ldr	r3, [r4, #0]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001c7c:	d068      	beq.n	8001d50 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001c7e:	4620      	mov	r0, r4
 8001c80:	f7ff ffce 	bl	8001c20 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c84:	2300      	movs	r3, #0
 8001c86:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c88:	6823      	ldr	r3, [r4, #0]
 8001c8a:	691a      	ldr	r2, [r3, #16]
 8001c8c:	f012 0f08 	tst.w	r2, #8
 8001c90:	d012      	beq.n	8001cb8 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c92:	68da      	ldr	r2, [r3, #12]
 8001c94:	f012 0f08 	tst.w	r2, #8
 8001c98:	d00e      	beq.n	8001cb8 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c9a:	f06f 0208 	mvn.w	r2, #8
 8001c9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ca0:	2304      	movs	r3, #4
 8001ca2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ca4:	6823      	ldr	r3, [r4, #0]
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	f013 0f03 	tst.w	r3, #3
 8001cac:	d057      	beq.n	8001d5e <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8001cae:	4620      	mov	r0, r4
 8001cb0:	f7ff ffb6 	bl	8001c20 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cb8:	6823      	ldr	r3, [r4, #0]
 8001cba:	691a      	ldr	r2, [r3, #16]
 8001cbc:	f012 0f10 	tst.w	r2, #16
 8001cc0:	d012      	beq.n	8001ce8 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	f012 0f10 	tst.w	r2, #16
 8001cc8:	d00e      	beq.n	8001ce8 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cca:	f06f 0210 	mvn.w	r2, #16
 8001cce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cd0:	2308      	movs	r3, #8
 8001cd2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cd4:	6823      	ldr	r3, [r4, #0]
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001cdc:	d046      	beq.n	8001d6c <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001cde:	4620      	mov	r0, r4
 8001ce0:	f7ff ff9e 	bl	8001c20 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ce8:	6823      	ldr	r3, [r4, #0]
 8001cea:	691a      	ldr	r2, [r3, #16]
 8001cec:	f012 0f01 	tst.w	r2, #1
 8001cf0:	d003      	beq.n	8001cfa <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cf2:	68da      	ldr	r2, [r3, #12]
 8001cf4:	f012 0f01 	tst.w	r2, #1
 8001cf8:	d13f      	bne.n	8001d7a <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cfa:	6823      	ldr	r3, [r4, #0]
 8001cfc:	691a      	ldr	r2, [r3, #16]
 8001cfe:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001d02:	d003      	beq.n	8001d0c <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001d0a:	d13d      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001d0c:	6823      	ldr	r3, [r4, #0]
 8001d0e:	691a      	ldr	r2, [r3, #16]
 8001d10:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001d14:	d003      	beq.n	8001d1e <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001d1c:	d13b      	bne.n	8001d96 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d1e:	6823      	ldr	r3, [r4, #0]
 8001d20:	691a      	ldr	r2, [r3, #16]
 8001d22:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001d26:	d003      	beq.n	8001d30 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d28:	68da      	ldr	r2, [r3, #12]
 8001d2a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001d2e:	d139      	bne.n	8001da4 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d30:	6823      	ldr	r3, [r4, #0]
 8001d32:	691a      	ldr	r2, [r3, #16]
 8001d34:	f012 0f20 	tst.w	r2, #32
 8001d38:	d003      	beq.n	8001d42 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	f012 0f20 	tst.w	r2, #32
 8001d40:	d137      	bne.n	8001db2 <HAL_TIM_IRQHandler+0x18c>
}
 8001d42:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d44:	f7ff ff6b 	bl	8001c1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d48:	4620      	mov	r0, r4
 8001d4a:	f7ff ff6a 	bl	8001c22 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d4e:	e781      	b.n	8001c54 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d50:	4620      	mov	r0, r4
 8001d52:	f7ff ff64 	bl	8001c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d56:	4620      	mov	r0, r4
 8001d58:	f7ff ff63 	bl	8001c22 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d5c:	e792      	b.n	8001c84 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d5e:	4620      	mov	r0, r4
 8001d60:	f7ff ff5d 	bl	8001c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d64:	4620      	mov	r0, r4
 8001d66:	f7ff ff5c 	bl	8001c22 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d6a:	e7a3      	b.n	8001cb4 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	f7ff ff56 	bl	8001c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d72:	4620      	mov	r0, r4
 8001d74:	f7ff ff55 	bl	8001c22 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d78:	e7b4      	b.n	8001ce4 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d7a:	f06f 0201 	mvn.w	r2, #1
 8001d7e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d80:	4620      	mov	r0, r4
 8001d82:	f7ff ff4b 	bl	8001c1c <HAL_TIM_PeriodElapsedCallback>
 8001d86:	e7b8      	b.n	8001cfa <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d8c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001d8e:	4620      	mov	r0, r4
 8001d90:	f000 fa81 	bl	8002296 <HAL_TIMEx_BreakCallback>
 8001d94:	e7ba      	b.n	8001d0c <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001d96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001d9a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	f000 fa7b 	bl	8002298 <HAL_TIMEx_Break2Callback>
 8001da2:	e7bc      	b.n	8001d1e <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001da4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001da8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001daa:	4620      	mov	r0, r4
 8001dac:	f7ff ff3a 	bl	8001c24 <HAL_TIM_TriggerCallback>
 8001db0:	e7be      	b.n	8001d30 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001db2:	f06f 0220 	mvn.w	r2, #32
 8001db6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001db8:	4620      	mov	r0, r4
 8001dba:	f000 fa6b 	bl	8002294 <HAL_TIMEx_CommutCallback>
}
 8001dbe:	e7c0      	b.n	8001d42 <HAL_TIM_IRQHandler+0x11c>

08001dc0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8001dc0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dc2:	4a1a      	ldr	r2, [pc, #104]	; (8001e2c <TIM_Base_SetConfig+0x6c>)
 8001dc4:	4290      	cmp	r0, r2
 8001dc6:	d002      	beq.n	8001dce <TIM_Base_SetConfig+0xe>
 8001dc8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001dcc:	d103      	bne.n	8001dd6 <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001dd2:	684a      	ldr	r2, [r1, #4]
 8001dd4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dd6:	4a15      	ldr	r2, [pc, #84]	; (8001e2c <TIM_Base_SetConfig+0x6c>)
 8001dd8:	4290      	cmp	r0, r2
 8001dda:	d00a      	beq.n	8001df2 <TIM_Base_SetConfig+0x32>
 8001ddc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001de0:	d007      	beq.n	8001df2 <TIM_Base_SetConfig+0x32>
 8001de2:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8001de6:	4290      	cmp	r0, r2
 8001de8:	d003      	beq.n	8001df2 <TIM_Base_SetConfig+0x32>
 8001dea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001dee:	4290      	cmp	r0, r2
 8001df0:	d103      	bne.n	8001dfa <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001df6:	68ca      	ldr	r2, [r1, #12]
 8001df8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001dfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001dfe:	694a      	ldr	r2, [r1, #20]
 8001e00:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001e02:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e04:	688b      	ldr	r3, [r1, #8]
 8001e06:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001e08:	680b      	ldr	r3, [r1, #0]
 8001e0a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e0c:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <TIM_Base_SetConfig+0x6c>)
 8001e0e:	4298      	cmp	r0, r3
 8001e10:	d007      	beq.n	8001e22 <TIM_Base_SetConfig+0x62>
 8001e12:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8001e16:	4298      	cmp	r0, r3
 8001e18:	d003      	beq.n	8001e22 <TIM_Base_SetConfig+0x62>
 8001e1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e1e:	4298      	cmp	r0, r3
 8001e20:	d101      	bne.n	8001e26 <TIM_Base_SetConfig+0x66>
    TIMx->RCR = Structure->RepetitionCounter;
 8001e22:	690b      	ldr	r3, [r1, #16]
 8001e24:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001e26:	2301      	movs	r3, #1
 8001e28:	6143      	str	r3, [r0, #20]
}
 8001e2a:	4770      	bx	lr
 8001e2c:	40012c00 	.word	0x40012c00

08001e30 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001e30:	b358      	cbz	r0, 8001e8a <HAL_TIM_Base_Init+0x5a>
{
 8001e32:	b510      	push	{r4, lr}
 8001e34:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001e36:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e3a:	b30b      	cbz	r3, 8001e80 <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e42:	1d21      	adds	r1, r4, #4
 8001e44:	6820      	ldr	r0, [r4, #0]
 8001e46:	f7ff ffbb 	bl	8001dc0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e50:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001e54:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001e58:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001e5c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8001e60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001e64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e68:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001e6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001e70:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8001e74:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8001e78:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001e7c:	2000      	movs	r0, #0
}
 8001e7e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001e80:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001e84:	f7fe fc32 	bl	80006ec <HAL_TIM_Base_MspInit>
 8001e88:	e7d8      	b.n	8001e3c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001e8a:	2001      	movs	r0, #1
}
 8001e8c:	4770      	bx	lr

08001e8e <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8001e8e:	b358      	cbz	r0, 8001ee8 <HAL_TIM_OC_Init+0x5a>
{
 8001e90:	b510      	push	{r4, lr}
 8001e92:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001e94:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e98:	b30b      	cbz	r3, 8001ede <HAL_TIM_OC_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001ea0:	1d21      	adds	r1, r4, #4
 8001ea2:	6820      	ldr	r0, [r4, #0]
 8001ea4:	f7ff ff8c 	bl	8001dc0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001eb2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001eb6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001eba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8001ebe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001ec2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ec6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001eca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001ece:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8001ed2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8001ed6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001eda:	2000      	movs	r0, #0
}
 8001edc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001ede:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8001ee2:	f7ff fe9a 	bl	8001c1a <HAL_TIM_OC_MspInit>
 8001ee6:	e7d8      	b.n	8001e9a <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8001ee8:	2001      	movs	r0, #1
}
 8001eea:	4770      	bx	lr

08001eec <TIM_OC2_SetConfig>:
{
 8001eec:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001eee:	6a03      	ldr	r3, [r0, #32]
 8001ef0:	f023 0310 	bic.w	r3, r3, #16
 8001ef4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001ef6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001ef8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001efa:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001efc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001f00:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f04:	680d      	ldr	r5, [r1, #0]
 8001f06:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8001f0a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f0e:	688d      	ldr	r5, [r1, #8]
 8001f10:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001f14:	4d12      	ldr	r5, [pc, #72]	; (8001f60 <TIM_OC2_SetConfig+0x74>)
 8001f16:	42a8      	cmp	r0, r5
 8001f18:	d019      	beq.n	8001f4e <TIM_OC2_SetConfig+0x62>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f1a:	4d11      	ldr	r5, [pc, #68]	; (8001f60 <TIM_OC2_SetConfig+0x74>)
 8001f1c:	42a8      	cmp	r0, r5
 8001f1e:	d007      	beq.n	8001f30 <TIM_OC2_SetConfig+0x44>
 8001f20:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001f24:	42a8      	cmp	r0, r5
 8001f26:	d003      	beq.n	8001f30 <TIM_OC2_SetConfig+0x44>
 8001f28:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001f2c:	42a8      	cmp	r0, r5
 8001f2e:	d107      	bne.n	8001f40 <TIM_OC2_SetConfig+0x54>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001f30:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001f34:	694d      	ldr	r5, [r1, #20]
 8001f36:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001f3a:	698d      	ldr	r5, [r1, #24]
 8001f3c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001f40:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001f42:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001f44:	684a      	ldr	r2, [r1, #4]
 8001f46:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001f48:	6203      	str	r3, [r0, #32]
}
 8001f4a:	bc30      	pop	{r4, r5}
 8001f4c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8001f4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001f52:	68cd      	ldr	r5, [r1, #12]
 8001f54:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8001f58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f5c:	e7dd      	b.n	8001f1a <TIM_OC2_SetConfig+0x2e>
 8001f5e:	bf00      	nop
 8001f60:	40012c00 	.word	0x40012c00

08001f64 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8001f64:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d02e      	beq.n	8001fca <HAL_TIM_OC_ConfigChannel+0x66>
{
 8001f6c:	b510      	push	{r4, lr}
 8001f6e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001f70:	2301      	movs	r3, #1
 8001f72:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8001f76:	2a14      	cmp	r2, #20
 8001f78:	d80f      	bhi.n	8001f9a <HAL_TIM_OC_ConfigChannel+0x36>
 8001f7a:	e8df f002 	tbb	[pc, r2]
 8001f7e:	0e0b      	.short	0x0e0b
 8001f80:	0e120e0e 	.word	0x0e120e0e
 8001f84:	0e160e0e 	.word	0x0e160e0e
 8001f88:	0e1a0e0e 	.word	0x0e1a0e0e
 8001f8c:	0e1e0e0e 	.word	0x0e1e0e0e
 8001f90:	0e0e      	.short	0x0e0e
 8001f92:	22          	.byte	0x22
 8001f93:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f94:	6800      	ldr	r0, [r0, #0]
 8001f96:	f7ff fd11 	bl	80019bc <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001fa0:	bd10      	pop	{r4, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001fa2:	6800      	ldr	r0, [r0, #0]
 8001fa4:	f7ff ffa2 	bl	8001eec <TIM_OC2_SetConfig>
      break;
 8001fa8:	e7f7      	b.n	8001f9a <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001faa:	6800      	ldr	r0, [r0, #0]
 8001fac:	f7ff fd44 	bl	8001a38 <TIM_OC3_SetConfig>
      break;
 8001fb0:	e7f3      	b.n	8001f9a <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001fb2:	6800      	ldr	r0, [r0, #0]
 8001fb4:	f7ff fd7a 	bl	8001aac <TIM_OC4_SetConfig>
      break;
 8001fb8:	e7ef      	b.n	8001f9a <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001fba:	6800      	ldr	r0, [r0, #0]
 8001fbc:	f7ff fda4 	bl	8001b08 <TIM_OC5_SetConfig>
      break;
 8001fc0:	e7eb      	b.n	8001f9a <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001fc2:	6800      	ldr	r0, [r0, #0]
 8001fc4:	f7ff fdcc 	bl	8001b60 <TIM_OC6_SetConfig>
      break;
 8001fc8:	e7e7      	b.n	8001f9a <HAL_TIM_OC_ConfigChannel+0x36>
  __HAL_LOCK(htim);
 8001fca:	2002      	movs	r0, #2
}
 8001fcc:	4770      	bx	lr

08001fce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001fce:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001fd0:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fd2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001fd6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001fda:	430b      	orrs	r3, r1
 8001fdc:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fde:	6083      	str	r3, [r0, #8]
}
 8001fe0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001fe4:	4770      	bx	lr
	...

08001fe8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001fe8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d064      	beq.n	80020ba <HAL_TIM_ConfigClockSource+0xd2>
{
 8001ff0:	b510      	push	{r4, lr}
 8001ff2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002000:	6802      	ldr	r2, [r0, #0]
 8002002:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002004:	4b2e      	ldr	r3, [pc, #184]	; (80020c0 <HAL_TIM_ConfigClockSource+0xd8>)
 8002006:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8002008:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800200a:	680b      	ldr	r3, [r1, #0]
 800200c:	2b40      	cmp	r3, #64	; 0x40
 800200e:	d04a      	beq.n	80020a6 <HAL_TIM_ConfigClockSource+0xbe>
 8002010:	d913      	bls.n	800203a <HAL_TIM_ConfigClockSource+0x52>
 8002012:	2b60      	cmp	r3, #96	; 0x60
 8002014:	d03d      	beq.n	8002092 <HAL_TIM_ConfigClockSource+0xaa>
 8002016:	d91e      	bls.n	8002056 <HAL_TIM_ConfigClockSource+0x6e>
 8002018:	2b70      	cmp	r3, #112	; 0x70
 800201a:	d028      	beq.n	800206e <HAL_TIM_ConfigClockSource+0x86>
 800201c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002020:	d130      	bne.n	8002084 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 8002022:	68cb      	ldr	r3, [r1, #12]
 8002024:	684a      	ldr	r2, [r1, #4]
 8002026:	6889      	ldr	r1, [r1, #8]
 8002028:	6820      	ldr	r0, [r4, #0]
 800202a:	f7ff ffd0 	bl	8001fce <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800202e:	6822      	ldr	r2, [r4, #0]
 8002030:	6893      	ldr	r3, [r2, #8]
 8002032:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002036:	6093      	str	r3, [r2, #8]
      break;
 8002038:	e024      	b.n	8002084 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 800203a:	2b10      	cmp	r3, #16
 800203c:	d006      	beq.n	800204c <HAL_TIM_ConfigClockSource+0x64>
 800203e:	d904      	bls.n	800204a <HAL_TIM_ConfigClockSource+0x62>
 8002040:	2b20      	cmp	r3, #32
 8002042:	d003      	beq.n	800204c <HAL_TIM_ConfigClockSource+0x64>
 8002044:	2b30      	cmp	r3, #48	; 0x30
 8002046:	d001      	beq.n	800204c <HAL_TIM_ConfigClockSource+0x64>
 8002048:	e01c      	b.n	8002084 <HAL_TIM_ConfigClockSource+0x9c>
 800204a:	b9db      	cbnz	r3, 8002084 <HAL_TIM_ConfigClockSource+0x9c>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800204c:	4619      	mov	r1, r3
 800204e:	6820      	ldr	r0, [r4, #0]
 8002050:	f7ff fddb 	bl	8001c0a <TIM_ITRx_SetConfig>
        break;
 8002054:	e016      	b.n	8002084 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 8002056:	2b50      	cmp	r3, #80	; 0x50
 8002058:	d114      	bne.n	8002084 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800205a:	68ca      	ldr	r2, [r1, #12]
 800205c:	6849      	ldr	r1, [r1, #4]
 800205e:	6820      	ldr	r0, [r4, #0]
 8002060:	f7ff fdac 	bl	8001bbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002064:	2150      	movs	r1, #80	; 0x50
 8002066:	6820      	ldr	r0, [r4, #0]
 8002068:	f7ff fdcf 	bl	8001c0a <TIM_ITRx_SetConfig>
      break;
 800206c:	e00a      	b.n	8002084 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 800206e:	68cb      	ldr	r3, [r1, #12]
 8002070:	684a      	ldr	r2, [r1, #4]
 8002072:	6889      	ldr	r1, [r1, #8]
 8002074:	6820      	ldr	r0, [r4, #0]
 8002076:	f7ff ffaa 	bl	8001fce <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800207a:	6822      	ldr	r2, [r4, #0]
 800207c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800207e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002082:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002084:	2301      	movs	r3, #1
 8002086:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800208a:	2000      	movs	r0, #0
 800208c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002090:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002092:	68ca      	ldr	r2, [r1, #12]
 8002094:	6849      	ldr	r1, [r1, #4]
 8002096:	6820      	ldr	r0, [r4, #0]
 8002098:	f7ff fda3 	bl	8001be2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800209c:	2160      	movs	r1, #96	; 0x60
 800209e:	6820      	ldr	r0, [r4, #0]
 80020a0:	f7ff fdb3 	bl	8001c0a <TIM_ITRx_SetConfig>
      break;
 80020a4:	e7ee      	b.n	8002084 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020a6:	68ca      	ldr	r2, [r1, #12]
 80020a8:	6849      	ldr	r1, [r1, #4]
 80020aa:	6820      	ldr	r0, [r4, #0]
 80020ac:	f7ff fd86 	bl	8001bbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80020b0:	2140      	movs	r1, #64	; 0x40
 80020b2:	6820      	ldr	r0, [r4, #0]
 80020b4:	f7ff fda9 	bl	8001c0a <TIM_ITRx_SetConfig>
      break;
 80020b8:	e7e4      	b.n	8002084 <HAL_TIM_ConfigClockSource+0x9c>
  __HAL_LOCK(htim);
 80020ba:	2002      	movs	r0, #2
}
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	fffe0088 	.word	0xfffe0088

080020c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80020c4:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80020c6:	f001 011f 	and.w	r1, r1, #31
 80020ca:	2301      	movs	r3, #1
 80020cc:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80020d0:	6a03      	ldr	r3, [r0, #32]
 80020d2:	ea23 0304 	bic.w	r3, r3, r4
 80020d6:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80020d8:	6a03      	ldr	r3, [r0, #32]
 80020da:	408a      	lsls	r2, r1
 80020dc:	4313      	orrs	r3, r2
 80020de:	6203      	str	r3, [r0, #32]
}
 80020e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80020e4:	4770      	bx	lr
	...

080020e8 <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80020e8:	460a      	mov	r2, r1
 80020ea:	2900      	cmp	r1, #0
 80020ec:	d136      	bne.n	800215c <HAL_TIM_OC_Start+0x74>
 80020ee:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	f113 33ff 	adds.w	r3, r3, #4294967295
 80020f8:	bf18      	it	ne
 80020fa:	2301      	movne	r3, #1
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f040 8087 	bne.w	8002210 <HAL_TIM_OC_Start+0x128>
{
 8002102:	b510      	push	{r4, lr}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002104:	2a00      	cmp	r2, #0
 8002106:	d159      	bne.n	80021bc <HAL_TIM_OC_Start+0xd4>
 8002108:	2302      	movs	r3, #2
 800210a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 800210e:	4611      	mov	r1, r2
 8002110:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002112:	2201      	movs	r2, #1
 8002114:	6800      	ldr	r0, [r0, #0]
 8002116:	f7ff ffd5 	bl	80020c4 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800211a:	6823      	ldr	r3, [r4, #0]
 800211c:	4a3f      	ldr	r2, [pc, #252]	; (800221c <HAL_TIM_OC_Start+0x134>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d007      	beq.n	8002132 <HAL_TIM_OC_Start+0x4a>
 8002122:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8002126:	4293      	cmp	r3, r2
 8002128:	d003      	beq.n	8002132 <HAL_TIM_OC_Start+0x4a>
 800212a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800212e:	4293      	cmp	r3, r2
 8002130:	d103      	bne.n	800213a <HAL_TIM_OC_Start+0x52>
    __HAL_TIM_MOE_ENABLE(htim);
 8002132:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002134:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002138:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800213a:	6823      	ldr	r3, [r4, #0]
 800213c:	4a37      	ldr	r2, [pc, #220]	; (800221c <HAL_TIM_OC_Start+0x134>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d058      	beq.n	80021f4 <HAL_TIM_OC_Start+0x10c>
 8002142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002146:	d055      	beq.n	80021f4 <HAL_TIM_OC_Start+0x10c>
 8002148:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 800214c:	4293      	cmp	r3, r2
 800214e:	d051      	beq.n	80021f4 <HAL_TIM_OC_Start+0x10c>
    __HAL_TIM_ENABLE(htim);
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	f042 0201 	orr.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002158:	2000      	movs	r0, #0
}
 800215a:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800215c:	2904      	cmp	r1, #4
 800215e:	d00d      	beq.n	800217c <HAL_TIM_OC_Start+0x94>
 8002160:	2908      	cmp	r1, #8
 8002162:	d013      	beq.n	800218c <HAL_TIM_OC_Start+0xa4>
 8002164:	290c      	cmp	r1, #12
 8002166:	d019      	beq.n	800219c <HAL_TIM_OC_Start+0xb4>
 8002168:	2910      	cmp	r1, #16
 800216a:	d01f      	beq.n	80021ac <HAL_TIM_OC_Start+0xc4>
 800216c:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8002170:	b2db      	uxtb	r3, r3
 8002172:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002176:	bf18      	it	ne
 8002178:	2301      	movne	r3, #1
 800217a:	e7bf      	b.n	80020fc <HAL_TIM_OC_Start+0x14>
 800217c:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8002180:	b2db      	uxtb	r3, r3
 8002182:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002186:	bf18      	it	ne
 8002188:	2301      	movne	r3, #1
 800218a:	e7b7      	b.n	80020fc <HAL_TIM_OC_Start+0x14>
 800218c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002190:	b2db      	uxtb	r3, r3
 8002192:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002196:	bf18      	it	ne
 8002198:	2301      	movne	r3, #1
 800219a:	e7af      	b.n	80020fc <HAL_TIM_OC_Start+0x14>
 800219c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	f113 33ff 	adds.w	r3, r3, #4294967295
 80021a6:	bf18      	it	ne
 80021a8:	2301      	movne	r3, #1
 80021aa:	e7a7      	b.n	80020fc <HAL_TIM_OC_Start+0x14>
 80021ac:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	f113 33ff 	adds.w	r3, r3, #4294967295
 80021b6:	bf18      	it	ne
 80021b8:	2301      	movne	r3, #1
 80021ba:	e79f      	b.n	80020fc <HAL_TIM_OC_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021bc:	2a04      	cmp	r2, #4
 80021be:	d009      	beq.n	80021d4 <HAL_TIM_OC_Start+0xec>
 80021c0:	2a08      	cmp	r2, #8
 80021c2:	d00b      	beq.n	80021dc <HAL_TIM_OC_Start+0xf4>
 80021c4:	2a0c      	cmp	r2, #12
 80021c6:	d00d      	beq.n	80021e4 <HAL_TIM_OC_Start+0xfc>
 80021c8:	2a10      	cmp	r2, #16
 80021ca:	d00f      	beq.n	80021ec <HAL_TIM_OC_Start+0x104>
 80021cc:	2302      	movs	r3, #2
 80021ce:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 80021d2:	e79c      	b.n	800210e <HAL_TIM_OC_Start+0x26>
 80021d4:	2302      	movs	r3, #2
 80021d6:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80021da:	e798      	b.n	800210e <HAL_TIM_OC_Start+0x26>
 80021dc:	2302      	movs	r3, #2
 80021de:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80021e2:	e794      	b.n	800210e <HAL_TIM_OC_Start+0x26>
 80021e4:	2302      	movs	r3, #2
 80021e6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 80021ea:	e790      	b.n	800210e <HAL_TIM_OC_Start+0x26>
 80021ec:	2302      	movs	r3, #2
 80021ee:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 80021f2:	e78c      	b.n	800210e <HAL_TIM_OC_Start+0x26>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021f4:	6899      	ldr	r1, [r3, #8]
 80021f6:	4a0a      	ldr	r2, [pc, #40]	; (8002220 <HAL_TIM_OC_Start+0x138>)
 80021f8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021fa:	2a06      	cmp	r2, #6
 80021fc:	d00a      	beq.n	8002214 <HAL_TIM_OC_Start+0x12c>
 80021fe:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002202:	d009      	beq.n	8002218 <HAL_TIM_OC_Start+0x130>
      __HAL_TIM_ENABLE(htim);
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	f042 0201 	orr.w	r2, r2, #1
 800220a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800220c:	2000      	movs	r0, #0
 800220e:	e7a4      	b.n	800215a <HAL_TIM_OC_Start+0x72>
    return HAL_ERROR;
 8002210:	2001      	movs	r0, #1
}
 8002212:	4770      	bx	lr
  return HAL_OK;
 8002214:	2000      	movs	r0, #0
 8002216:	e7a0      	b.n	800215a <HAL_TIM_OC_Start+0x72>
 8002218:	2000      	movs	r0, #0
 800221a:	e79e      	b.n	800215a <HAL_TIM_OC_Start+0x72>
 800221c:	40012c00 	.word	0x40012c00
 8002220:	00010007 	.word	0x00010007

08002224 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002224:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002228:	2b01      	cmp	r3, #1
 800222a:	d02f      	beq.n	800228c <HAL_TIMEx_MasterConfigSynchronization+0x68>
{
 800222c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800222e:	2301      	movs	r3, #1
 8002230:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002234:	2302      	movs	r3, #2
 8002236:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800223a:	6802      	ldr	r2, [r0, #0]
 800223c:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800223e:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002240:	4c13      	ldr	r4, [pc, #76]	; (8002290 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8002242:	42a2      	cmp	r2, r4
 8002244:	d01d      	beq.n	8002282 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800224a:	680c      	ldr	r4, [r1, #0]
 800224c:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800224e:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002250:	6803      	ldr	r3, [r0, #0]
 8002252:	4a0f      	ldr	r2, [pc, #60]	; (8002290 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d006      	beq.n	8002266 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8002258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800225c:	d003      	beq.n	8002266 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 800225e:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8002262:	4293      	cmp	r3, r2
 8002264:	d104      	bne.n	8002270 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002266:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800226a:	688a      	ldr	r2, [r1, #8]
 800226c:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800226e:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002270:	2301      	movs	r3, #1
 8002272:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002276:	2300      	movs	r3, #0
 8002278:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800227c:	4618      	mov	r0, r3
}
 800227e:	bc30      	pop	{r4, r5}
 8002280:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002282:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002286:	684c      	ldr	r4, [r1, #4]
 8002288:	4323      	orrs	r3, r4
 800228a:	e7dc      	b.n	8002246 <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 800228c:	2002      	movs	r0, #2
}
 800228e:	4770      	bx	lr
 8002290:	40012c00 	.word	0x40012c00

08002294 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002294:	4770      	bx	lr

08002296 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002296:	4770      	bx	lr

08002298 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002298:	4770      	bx	lr
	...

0800229c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800229c:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 80022a0:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80022a2:	6801      	ldr	r1, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80022a4:	6883      	ldr	r3, [r0, #8]
 80022a6:	6902      	ldr	r2, [r0, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	6942      	ldr	r2, [r0, #20]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	69c2      	ldr	r2, [r0, #28]
 80022b0:	4313      	orrs	r3, r2
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80022b2:	6808      	ldr	r0, [r1, #0]
 80022b4:	4a8c      	ldr	r2, [pc, #560]	; (80024e8 <UART_SetConfig+0x24c>)
 80022b6:	4002      	ands	r2, r0
 80022b8:	4313      	orrs	r3, r2
 80022ba:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022bc:	6822      	ldr	r2, [r4, #0]
 80022be:	6853      	ldr	r3, [r2, #4]
 80022c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022c4:	68e1      	ldr	r1, [r4, #12]
 80022c6:	430b      	orrs	r3, r1
 80022c8:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80022ca:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80022cc:	6822      	ldr	r2, [r4, #0]
 80022ce:	4b87      	ldr	r3, [pc, #540]	; (80024ec <UART_SetConfig+0x250>)
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d001      	beq.n	80022d8 <UART_SetConfig+0x3c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80022d4:	6a23      	ldr	r3, [r4, #32]
 80022d6:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80022d8:	6893      	ldr	r3, [r2, #8]
 80022da:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80022de:	430b      	orrs	r3, r1
 80022e0:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022e2:	6823      	ldr	r3, [r4, #0]
 80022e4:	4a82      	ldr	r2, [pc, #520]	; (80024f0 <UART_SetConfig+0x254>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d01c      	beq.n	8002324 <UART_SetConfig+0x88>
 80022ea:	4a82      	ldr	r2, [pc, #520]	; (80024f4 <UART_SetConfig+0x258>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d02d      	beq.n	800234c <UART_SetConfig+0xb0>
 80022f0:	4a7e      	ldr	r2, [pc, #504]	; (80024ec <UART_SetConfig+0x250>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d043      	beq.n	800237e <UART_SetConfig+0xe2>
 80022f6:	2210      	movs	r2, #16

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80022f8:	497c      	ldr	r1, [pc, #496]	; (80024ec <UART_SetConfig+0x250>)
 80022fa:	428b      	cmp	r3, r1
 80022fc:	d05e      	beq.n	80023bc <UART_SetConfig+0x120>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022fe:	69e3      	ldr	r3, [r4, #28]
 8002300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002304:	f000 808c 	beq.w	8002420 <UART_SetConfig+0x184>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002308:	2a08      	cmp	r2, #8
 800230a:	f200 80e7 	bhi.w	80024dc <UART_SetConfig+0x240>
 800230e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002312:	00b7      	.short	0x00b7
 8002314:	00b500ce 	.word	0x00b500ce
 8002318:	00d100e5 	.word	0x00d100e5
 800231c:	00e500e5 	.word	0x00e500e5
 8002320:	00d400e5 	.word	0x00d400e5
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002324:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8002328:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800232c:	f002 0203 	and.w	r2, r2, #3
 8002330:	2a03      	cmp	r2, #3
 8002332:	d809      	bhi.n	8002348 <UART_SetConfig+0xac>
 8002334:	e8df f002 	tbb	[pc, r2]
 8002338:	063c0402 	.word	0x063c0402
 800233c:	2201      	movs	r2, #1
 800233e:	e7db      	b.n	80022f8 <UART_SetConfig+0x5c>
 8002340:	2204      	movs	r2, #4
 8002342:	e7d9      	b.n	80022f8 <UART_SetConfig+0x5c>
 8002344:	2208      	movs	r2, #8
 8002346:	e7d7      	b.n	80022f8 <UART_SetConfig+0x5c>
 8002348:	2210      	movs	r2, #16
 800234a:	e7d5      	b.n	80022f8 <UART_SetConfig+0x5c>
 800234c:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8002350:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002354:	f002 020c 	and.w	r2, r2, #12
 8002358:	2a0c      	cmp	r2, #12
 800235a:	d80e      	bhi.n	800237a <UART_SetConfig+0xde>
 800235c:	e8df f002 	tbb	[pc, r2]
 8002360:	0d0d0d07 	.word	0x0d0d0d07
 8002364:	0d0d0d09 	.word	0x0d0d0d09
 8002368:	0d0d0d2a 	.word	0x0d0d0d2a
 800236c:	0b          	.byte	0x0b
 800236d:	00          	.byte	0x00
 800236e:	2200      	movs	r2, #0
 8002370:	e7c2      	b.n	80022f8 <UART_SetConfig+0x5c>
 8002372:	2204      	movs	r2, #4
 8002374:	e7c0      	b.n	80022f8 <UART_SetConfig+0x5c>
 8002376:	2208      	movs	r2, #8
 8002378:	e7be      	b.n	80022f8 <UART_SetConfig+0x5c>
 800237a:	2210      	movs	r2, #16
 800237c:	e7bc      	b.n	80022f8 <UART_SetConfig+0x5c>
 800237e:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 8002382:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002386:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800238a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800238e:	d00b      	beq.n	80023a8 <UART_SetConfig+0x10c>
 8002390:	d907      	bls.n	80023a2 <UART_SetConfig+0x106>
 8002392:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002396:	d00f      	beq.n	80023b8 <UART_SetConfig+0x11c>
 8002398:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800239c:	d106      	bne.n	80023ac <UART_SetConfig+0x110>
 800239e:	2208      	movs	r2, #8
 80023a0:	e7aa      	b.n	80022f8 <UART_SetConfig+0x5c>
 80023a2:	b91a      	cbnz	r2, 80023ac <UART_SetConfig+0x110>
 80023a4:	2200      	movs	r2, #0
 80023a6:	e7a7      	b.n	80022f8 <UART_SetConfig+0x5c>
 80023a8:	2204      	movs	r2, #4
 80023aa:	e7a5      	b.n	80022f8 <UART_SetConfig+0x5c>
 80023ac:	2210      	movs	r2, #16
 80023ae:	e7a3      	b.n	80022f8 <UART_SetConfig+0x5c>
 80023b0:	2202      	movs	r2, #2
 80023b2:	e7a1      	b.n	80022f8 <UART_SetConfig+0x5c>
 80023b4:	2202      	movs	r2, #2
 80023b6:	e79f      	b.n	80022f8 <UART_SetConfig+0x5c>
 80023b8:	2202      	movs	r2, #2
 80023ba:	e79d      	b.n	80022f8 <UART_SetConfig+0x5c>
    switch (clocksource)
 80023bc:	2a08      	cmp	r2, #8
 80023be:	d87f      	bhi.n	80024c0 <UART_SetConfig+0x224>
 80023c0:	e8df f002 	tbb	[pc, r2]
 80023c4:	7e107e08 	.word	0x7e107e08
 80023c8:	7e7e7e0d 	.word	0x7e7e7e0d
 80023cc:	05          	.byte	0x05
 80023cd:	00          	.byte	0x00
        pclk = (uint32_t) LSE_VALUE;
 80023ce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80023d2:	e008      	b.n	80023e6 <UART_SetConfig+0x14a>
        pclk = HAL_RCC_GetPCLK1Freq();
 80023d4:	f7ff f8a4 	bl	8001520 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80023d8:	b928      	cbnz	r0, 80023e6 <UART_SetConfig+0x14a>
 80023da:	2000      	movs	r0, #0
 80023dc:	e062      	b.n	80024a4 <UART_SetConfig+0x208>
        pclk = HAL_RCC_GetSysClockFreq();
 80023de:	f7fe fc4d 	bl	8000c7c <HAL_RCC_GetSysClockFreq>
        break;
 80023e2:	e7f9      	b.n	80023d8 <UART_SetConfig+0x13c>
        pclk = (uint32_t) HSI_VALUE;
 80023e4:	4844      	ldr	r0, [pc, #272]	; (80024f8 <UART_SetConfig+0x25c>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80023e6:	6862      	ldr	r2, [r4, #4]
 80023e8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80023ec:	4283      	cmp	r3, r0
 80023ee:	d869      	bhi.n	80024c4 <UART_SetConfig+0x228>
 80023f0:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80023f4:	d868      	bhi.n	80024c8 <UART_SetConfig+0x22c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80023f6:	2300      	movs	r3, #0
 80023f8:	0e07      	lsrs	r7, r0, #24
 80023fa:	0206      	lsls	r6, r0, #8
 80023fc:	0850      	lsrs	r0, r2, #1
 80023fe:	eb16 0b00 	adds.w	fp, r6, r0
 8002402:	f147 0c00 	adc.w	ip, r7, #0
 8002406:	4658      	mov	r0, fp
 8002408:	4661      	mov	r1, ip
 800240a:	f7fd fee1 	bl	80001d0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800240e:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8002412:	4b3a      	ldr	r3, [pc, #232]	; (80024fc <UART_SetConfig+0x260>)
 8002414:	429a      	cmp	r2, r3
 8002416:	d859      	bhi.n	80024cc <UART_SetConfig+0x230>
          huart->Instance->BRR = usartdiv;
 8002418:	6823      	ldr	r3, [r4, #0]
 800241a:	60d8      	str	r0, [r3, #12]
 800241c:	2000      	movs	r0, #0
 800241e:	e041      	b.n	80024a4 <UART_SetConfig+0x208>
    switch (clocksource)
 8002420:	2a08      	cmp	r2, #8
 8002422:	d855      	bhi.n	80024d0 <UART_SetConfig+0x234>
 8002424:	e8df f002 	tbb	[pc, r2]
 8002428:	54052107 	.word	0x54052107
 800242c:	54545424 	.word	0x54545424
 8002430:	27          	.byte	0x27
 8002431:	00          	.byte	0x00
        pclk = (uint32_t) HSI_VALUE;
 8002432:	4831      	ldr	r0, [pc, #196]	; (80024f8 <UART_SetConfig+0x25c>)
 8002434:	e003      	b.n	800243e <UART_SetConfig+0x1a2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002436:	f7ff f873 	bl	8001520 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800243a:	2800      	cmp	r0, #0
 800243c:	d04a      	beq.n	80024d4 <UART_SetConfig+0x238>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800243e:	6862      	ldr	r2, [r4, #4]
 8002440:	0853      	lsrs	r3, r2, #1
 8002442:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002446:	fbb3 f3f2 	udiv	r3, r3, r2
 800244a:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800244c:	f1a3 0110 	sub.w	r1, r3, #16
 8002450:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002454:	4291      	cmp	r1, r2
 8002456:	d83f      	bhi.n	80024d8 <UART_SetConfig+0x23c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002458:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800245c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8002460:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8002462:	6822      	ldr	r2, [r4, #0]
 8002464:	60d3      	str	r3, [r2, #12]
 8002466:	2000      	movs	r0, #0
 8002468:	e01c      	b.n	80024a4 <UART_SetConfig+0x208>
        pclk = HAL_RCC_GetPCLK2Freq();
 800246a:	f7ff f86b 	bl	8001544 <HAL_RCC_GetPCLK2Freq>
        break;
 800246e:	e7e4      	b.n	800243a <UART_SetConfig+0x19e>
        pclk = HAL_RCC_GetSysClockFreq();
 8002470:	f7fe fc04 	bl	8000c7c <HAL_RCC_GetSysClockFreq>
        break;
 8002474:	e7e1      	b.n	800243a <UART_SetConfig+0x19e>
        pclk = (uint32_t) LSE_VALUE;
 8002476:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800247a:	e7e0      	b.n	800243e <UART_SetConfig+0x1a2>
        break;
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
        break;
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800247c:	481e      	ldr	r0, [pc, #120]	; (80024f8 <UART_SetConfig+0x25c>)
 800247e:	e002      	b.n	8002486 <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002480:	f7ff f84e 	bl	8001520 <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 8002484:	b360      	cbz	r0, 80024e0 <UART_SetConfig+0x244>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002486:	6863      	ldr	r3, [r4, #4]
 8002488:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800248c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002490:	b280      	uxth	r0, r0
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002492:	f1a0 0210 	sub.w	r2, r0, #16
 8002496:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800249a:	429a      	cmp	r2, r3
 800249c:	d822      	bhi.n	80024e4 <UART_SetConfig+0x248>
      {
        huart->Instance->BRR = usartdiv;
 800249e:	6823      	ldr	r3, [r4, #0]
 80024a0:	60d8      	str	r0, [r3, #12]
 80024a2:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80024a8:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 80024aa:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 80024ae:	f7ff f849 	bl	8001544 <HAL_RCC_GetPCLK2Freq>
        break;
 80024b2:	e7e7      	b.n	8002484 <UART_SetConfig+0x1e8>
        pclk = HAL_RCC_GetSysClockFreq();
 80024b4:	f7fe fbe2 	bl	8000c7c <HAL_RCC_GetSysClockFreq>
        break;
 80024b8:	e7e4      	b.n	8002484 <UART_SetConfig+0x1e8>
        pclk = (uint32_t) LSE_VALUE;
 80024ba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80024be:	e7e2      	b.n	8002486 <UART_SetConfig+0x1ea>
        ret = HAL_ERROR;
 80024c0:	2001      	movs	r0, #1
 80024c2:	e7ef      	b.n	80024a4 <UART_SetConfig+0x208>
        ret = HAL_ERROR;
 80024c4:	2001      	movs	r0, #1
 80024c6:	e7ed      	b.n	80024a4 <UART_SetConfig+0x208>
 80024c8:	2001      	movs	r0, #1
 80024ca:	e7eb      	b.n	80024a4 <UART_SetConfig+0x208>
          ret = HAL_ERROR;
 80024cc:	2001      	movs	r0, #1
 80024ce:	e7e9      	b.n	80024a4 <UART_SetConfig+0x208>
        ret = HAL_ERROR;
 80024d0:	2001      	movs	r0, #1
 80024d2:	e7e7      	b.n	80024a4 <UART_SetConfig+0x208>
 80024d4:	2000      	movs	r0, #0
 80024d6:	e7e5      	b.n	80024a4 <UART_SetConfig+0x208>
        ret = HAL_ERROR;
 80024d8:	2001      	movs	r0, #1
 80024da:	e7e3      	b.n	80024a4 <UART_SetConfig+0x208>
        ret = HAL_ERROR;
 80024dc:	2001      	movs	r0, #1
 80024de:	e7e1      	b.n	80024a4 <UART_SetConfig+0x208>
 80024e0:	2000      	movs	r0, #0
 80024e2:	e7df      	b.n	80024a4 <UART_SetConfig+0x208>
        ret = HAL_ERROR;
 80024e4:	2001      	movs	r0, #1
 80024e6:	e7dd      	b.n	80024a4 <UART_SetConfig+0x208>
 80024e8:	efff69f3 	.word	0xefff69f3
 80024ec:	40008000 	.word	0x40008000
 80024f0:	40013800 	.word	0x40013800
 80024f4:	40004400 	.word	0x40004400
 80024f8:	00f42400 	.word	0x00f42400
 80024fc:	000ffcff 	.word	0x000ffcff

08002500 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002500:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002502:	f013 0f01 	tst.w	r3, #1
 8002506:	d006      	beq.n	8002516 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002508:	6802      	ldr	r2, [r0, #0]
 800250a:	6853      	ldr	r3, [r2, #4]
 800250c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002510:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002512:	430b      	orrs	r3, r1
 8002514:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002516:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002518:	f013 0f02 	tst.w	r3, #2
 800251c:	d006      	beq.n	800252c <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800251e:	6802      	ldr	r2, [r0, #0]
 8002520:	6853      	ldr	r3, [r2, #4]
 8002522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002526:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002528:	430b      	orrs	r3, r1
 800252a:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800252c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800252e:	f013 0f04 	tst.w	r3, #4
 8002532:	d006      	beq.n	8002542 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002534:	6802      	ldr	r2, [r0, #0]
 8002536:	6853      	ldr	r3, [r2, #4]
 8002538:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800253c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800253e:	430b      	orrs	r3, r1
 8002540:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002542:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002544:	f013 0f08 	tst.w	r3, #8
 8002548:	d006      	beq.n	8002558 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800254a:	6802      	ldr	r2, [r0, #0]
 800254c:	6853      	ldr	r3, [r2, #4]
 800254e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002552:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002554:	430b      	orrs	r3, r1
 8002556:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002558:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800255a:	f013 0f10 	tst.w	r3, #16
 800255e:	d006      	beq.n	800256e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002560:	6802      	ldr	r2, [r0, #0]
 8002562:	6893      	ldr	r3, [r2, #8]
 8002564:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002568:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800256a:	430b      	orrs	r3, r1
 800256c:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800256e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002570:	f013 0f20 	tst.w	r3, #32
 8002574:	d006      	beq.n	8002584 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002576:	6802      	ldr	r2, [r0, #0]
 8002578:	6893      	ldr	r3, [r2, #8]
 800257a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800257e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002580:	430b      	orrs	r3, r1
 8002582:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002584:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002586:	f013 0f40 	tst.w	r3, #64	; 0x40
 800258a:	d00a      	beq.n	80025a2 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800258c:	6802      	ldr	r2, [r0, #0]
 800258e:	6853      	ldr	r3, [r2, #4]
 8002590:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002594:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002596:	430b      	orrs	r3, r1
 8002598:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800259a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800259c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025a0:	d00b      	beq.n	80025ba <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80025a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80025a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80025a8:	d006      	beq.n	80025b8 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80025aa:	6802      	ldr	r2, [r0, #0]
 80025ac:	6853      	ldr	r3, [r2, #4]
 80025ae:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80025b2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80025b4:	430b      	orrs	r3, r1
 80025b6:	6053      	str	r3, [r2, #4]
  }
}
 80025b8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80025ba:	6802      	ldr	r2, [r0, #0]
 80025bc:	6853      	ldr	r3, [r2, #4]
 80025be:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80025c2:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80025c4:	430b      	orrs	r3, r1
 80025c6:	6053      	str	r3, [r2, #4]
 80025c8:	e7eb      	b.n	80025a2 <UART_AdvFeatureConfig+0xa2>

080025ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80025ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025ce:	4604      	mov	r4, r0
 80025d0:	460f      	mov	r7, r1
 80025d2:	4616      	mov	r6, r2
 80025d4:	4698      	mov	r8, r3
 80025d6:	9d06      	ldr	r5, [sp, #24]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025d8:	6823      	ldr	r3, [r4, #0]
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	ea37 0303 	bics.w	r3, r7, r3
 80025e0:	bf0c      	ite	eq
 80025e2:	2301      	moveq	r3, #1
 80025e4:	2300      	movne	r3, #0
 80025e6:	42b3      	cmp	r3, r6
 80025e8:	d13a      	bne.n	8002660 <UART_WaitOnFlagUntilTimeout+0x96>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ea:	f1b5 3fff 	cmp.w	r5, #4294967295
 80025ee:	d0f3      	beq.n	80025d8 <UART_WaitOnFlagUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025f0:	f7fe f97c 	bl	80008ec <HAL_GetTick>
 80025f4:	eba0 0008 	sub.w	r0, r0, r8
 80025f8:	42a8      	cmp	r0, r5
 80025fa:	d81f      	bhi.n	800263c <UART_WaitOnFlagUntilTimeout+0x72>
 80025fc:	b1f5      	cbz	r5, 800263c <UART_WaitOnFlagUntilTimeout+0x72>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80025fe:	6823      	ldr	r3, [r4, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	f012 0f04 	tst.w	r2, #4
 8002606:	d0e7      	beq.n	80025d8 <UART_WaitOnFlagUntilTimeout+0xe>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002608:	69da      	ldr	r2, [r3, #28]
 800260a:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800260e:	d0e3      	beq.n	80025d8 <UART_WaitOnFlagUntilTimeout+0xe>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002610:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002614:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002616:	6822      	ldr	r2, [r4, #0]
 8002618:	6813      	ldr	r3, [r2, #0]
 800261a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800261e:	6013      	str	r3, [r2, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002620:	6822      	ldr	r2, [r4, #0]
 8002622:	6893      	ldr	r3, [r2, #8]
 8002624:	f023 0301 	bic.w	r3, r3, #1
 8002628:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 800262a:	2320      	movs	r3, #32
 800262c:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800262e:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002630:	67e3      	str	r3, [r4, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002632:	2300      	movs	r3, #0
 8002634:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70

          return HAL_TIMEOUT;
 8002638:	2003      	movs	r0, #3
 800263a:	e012      	b.n	8002662 <UART_WaitOnFlagUntilTimeout+0x98>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800263c:	6822      	ldr	r2, [r4, #0]
 800263e:	6813      	ldr	r3, [r2, #0]
 8002640:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002644:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002646:	6822      	ldr	r2, [r4, #0]
 8002648:	6893      	ldr	r3, [r2, #8]
 800264a:	f023 0301 	bic.w	r3, r3, #1
 800264e:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002650:	2320      	movs	r3, #32
 8002652:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002654:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8002656:	2300      	movs	r3, #0
 8002658:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        return HAL_TIMEOUT;
 800265c:	2003      	movs	r0, #3
 800265e:	e000      	b.n	8002662 <UART_WaitOnFlagUntilTimeout+0x98>
        }
      }
    }
  }
  return HAL_OK;
 8002660:	2000      	movs	r0, #0
}
 8002662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002666 <UART_CheckIdleState>:
{
 8002666:	b530      	push	{r4, r5, lr}
 8002668:	b083      	sub	sp, #12
 800266a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800266c:	2300      	movs	r3, #0
 800266e:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002670:	f7fe f93c 	bl	80008ec <HAL_GetTick>
 8002674:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002676:	6823      	ldr	r3, [r4, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f013 0f08 	tst.w	r3, #8
 800267e:	d10c      	bne.n	800269a <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002680:	6823      	ldr	r3, [r4, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f013 0f04 	tst.w	r3, #4
 8002688:	d115      	bne.n	80026b6 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 800268a:	2320      	movs	r3, #32
 800268c:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800268e:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8002690:	2000      	movs	r0, #0
 8002692:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8002696:	b003      	add	sp, #12
 8002698:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800269a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	4603      	mov	r3, r0
 80026a2:	2200      	movs	r2, #0
 80026a4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80026a8:	4620      	mov	r0, r4
 80026aa:	f7ff ff8e 	bl	80025ca <UART_WaitOnFlagUntilTimeout>
 80026ae:	2800      	cmp	r0, #0
 80026b0:	d0e6      	beq.n	8002680 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80026b2:	2003      	movs	r0, #3
 80026b4:	e7ef      	b.n	8002696 <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	462b      	mov	r3, r5
 80026be:	2200      	movs	r2, #0
 80026c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80026c4:	4620      	mov	r0, r4
 80026c6:	f7ff ff80 	bl	80025ca <UART_WaitOnFlagUntilTimeout>
 80026ca:	2800      	cmp	r0, #0
 80026cc:	d0dd      	beq.n	800268a <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 80026ce:	2003      	movs	r0, #3
 80026d0:	e7e1      	b.n	8002696 <UART_CheckIdleState+0x30>

080026d2 <HAL_UART_Init>:
  if (huart == NULL)
 80026d2:	b368      	cbz	r0, 8002730 <HAL_UART_Init+0x5e>
{
 80026d4:	b510      	push	{r4, lr}
 80026d6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80026d8:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80026da:	b303      	cbz	r3, 800271e <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 80026dc:	2324      	movs	r3, #36	; 0x24
 80026de:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80026e0:	6822      	ldr	r2, [r4, #0]
 80026e2:	6813      	ldr	r3, [r2, #0]
 80026e4:	f023 0301 	bic.w	r3, r3, #1
 80026e8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026ea:	4620      	mov	r0, r4
 80026ec:	f7ff fdd6 	bl	800229c <UART_SetConfig>
 80026f0:	2801      	cmp	r0, #1
 80026f2:	d013      	beq.n	800271c <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026f6:	b9bb      	cbnz	r3, 8002728 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026f8:	6822      	ldr	r2, [r4, #0]
 80026fa:	6853      	ldr	r3, [r2, #4]
 80026fc:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002700:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002702:	6822      	ldr	r2, [r4, #0]
 8002704:	6893      	ldr	r3, [r2, #8]
 8002706:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800270a:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800270c:	6822      	ldr	r2, [r4, #0]
 800270e:	6813      	ldr	r3, [r2, #0]
 8002710:	f043 0301 	orr.w	r3, r3, #1
 8002714:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002716:	4620      	mov	r0, r4
 8002718:	f7ff ffa5 	bl	8002666 <UART_CheckIdleState>
}
 800271c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800271e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8002722:	f7fe f829 	bl	8000778 <HAL_UART_MspInit>
 8002726:	e7d9      	b.n	80026dc <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8002728:	4620      	mov	r0, r4
 800272a:	f7ff fee9 	bl	8002500 <UART_AdvFeatureConfig>
 800272e:	e7e3      	b.n	80026f8 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8002730:	2001      	movs	r0, #1
}
 8002732:	4770      	bx	lr

08002734 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002734:	f8df d034 	ldr.w	sp, [pc, #52]	; 800276c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002738:	f7fe f872 	bl	8000820 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800273c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800273e:	e003      	b.n	8002748 <LoopCopyDataInit>

08002740 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002742:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002744:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002746:	3104      	adds	r1, #4

08002748 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002748:	480a      	ldr	r0, [pc, #40]	; (8002774 <LoopForever+0xa>)
	ldr	r3, =_edata
 800274a:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <LoopForever+0xe>)
	adds	r2, r0, r1
 800274c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800274e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002750:	d3f6      	bcc.n	8002740 <CopyDataInit>
	ldr	r2, =_sbss
 8002752:	4a0a      	ldr	r2, [pc, #40]	; (800277c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002754:	e002      	b.n	800275c <LoopFillZerobss>

08002756 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002756:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002758:	f842 3b04 	str.w	r3, [r2], #4

0800275c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800275c:	4b08      	ldr	r3, [pc, #32]	; (8002780 <LoopForever+0x16>)
	cmp	r2, r3
 800275e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002760:	d3f9      	bcc.n	8002756 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002762:	f000 f811 	bl	8002788 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002766:	f7fd ff97 	bl	8000698 <main>

0800276a <LoopForever>:

LoopForever:
    b LoopForever
 800276a:	e7fe      	b.n	800276a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800276c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002770:	08002858 	.word	0x08002858
	ldr	r0, =_sdata
 8002774:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002778:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 800277c:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8002780:	200000fc 	.word	0x200000fc

08002784 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002784:	e7fe      	b.n	8002784 <ADC1_IRQHandler>
	...

08002788 <__libc_init_array>:
 8002788:	b570      	push	{r4, r5, r6, lr}
 800278a:	4e0d      	ldr	r6, [pc, #52]	; (80027c0 <__libc_init_array+0x38>)
 800278c:	4c0d      	ldr	r4, [pc, #52]	; (80027c4 <__libc_init_array+0x3c>)
 800278e:	1ba4      	subs	r4, r4, r6
 8002790:	10a4      	asrs	r4, r4, #2
 8002792:	2500      	movs	r5, #0
 8002794:	42a5      	cmp	r5, r4
 8002796:	d109      	bne.n	80027ac <__libc_init_array+0x24>
 8002798:	4e0b      	ldr	r6, [pc, #44]	; (80027c8 <__libc_init_array+0x40>)
 800279a:	4c0c      	ldr	r4, [pc, #48]	; (80027cc <__libc_init_array+0x44>)
 800279c:	f000 f820 	bl	80027e0 <_init>
 80027a0:	1ba4      	subs	r4, r4, r6
 80027a2:	10a4      	asrs	r4, r4, #2
 80027a4:	2500      	movs	r5, #0
 80027a6:	42a5      	cmp	r5, r4
 80027a8:	d105      	bne.n	80027b6 <__libc_init_array+0x2e>
 80027aa:	bd70      	pop	{r4, r5, r6, pc}
 80027ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027b0:	4798      	blx	r3
 80027b2:	3501      	adds	r5, #1
 80027b4:	e7ee      	b.n	8002794 <__libc_init_array+0xc>
 80027b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027ba:	4798      	blx	r3
 80027bc:	3501      	adds	r5, #1
 80027be:	e7f2      	b.n	80027a6 <__libc_init_array+0x1e>
 80027c0:	08002848 	.word	0x08002848
 80027c4:	08002848 	.word	0x08002848
 80027c8:	08002848 	.word	0x08002848
 80027cc:	0800284c 	.word	0x0800284c

080027d0 <memset>:
 80027d0:	4402      	add	r2, r0
 80027d2:	4603      	mov	r3, r0
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d100      	bne.n	80027da <memset+0xa>
 80027d8:	4770      	bx	lr
 80027da:	f803 1b01 	strb.w	r1, [r3], #1
 80027de:	e7f9      	b.n	80027d4 <memset+0x4>

080027e0 <_init>:
 80027e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027e2:	bf00      	nop
 80027e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027e6:	bc08      	pop	{r3}
 80027e8:	469e      	mov	lr, r3
 80027ea:	4770      	bx	lr

080027ec <_fini>:
 80027ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ee:	bf00      	nop
 80027f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027f2:	bc08      	pop	{r3}
 80027f4:	469e      	mov	lr, r3
 80027f6:	4770      	bx	lr
